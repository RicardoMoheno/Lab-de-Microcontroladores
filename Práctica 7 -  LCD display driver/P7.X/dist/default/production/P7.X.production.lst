

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Fri May 06 22:04:31 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	18F45K50
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    24                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    25                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    26                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    27  0000                     
    28                           ; Version 2.35
    29                           ; Generated 05/05/2021 GMT
    30                           ; 
    31                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution. Publication is not required when
    45                           ;        this file is used in an embedded application.
    46                           ; 
    47                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    48                           ;        software without specific prior written permission.
    49                           ; 
    50                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    51                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    52                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    53                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    54                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    55                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    56                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    57                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    58                           ; 
    59                           ; 
    60                           ; Code-generator required, PIC18F45K50 Definitions
    61                           ; 
    62                           ; SFR Addresses
    63  0000                     
    64                           	psect	smallconst
    65  000800                     __psmallconst:
    66                           	callstack 0
    67  000800  00                 	db	0
    68  000801                     _kbdMatrix:
    69                           	callstack 0
    70  000801  31                 	db	49
    71  000802  32                 	db	50
    72  000803  33                 	db	51
    73  000804  2B                 	db	43
    74  000805  34                 	db	52
    75  000806  35                 	db	53
    76  000807  36                 	db	54
    77  000808  2D                 	db	45
    78  000809  37                 	db	55
    79  00080A  38                 	db	56
    80  00080B  39                 	db	57
    81  00080C  2A                 	db	42
    82  00080D  3D                 	db	61
    83  00080E  30                 	db	48
    84  00080F  43                 	db	67
    85  000810  2F                 	db	47
    86  000811                     __end_of_kbdMatrix:
    87                           	callstack 0
    88  0000                     _TRISCbits	set	3988
    89  0000                     _TRISD	set	3989
    90  0000                     _LATC	set	3979
    91  0000                     _ANSELB	set	3932
    92  0000                     _OSCCON	set	4051
    93  0000                     _INTCON2bits	set	4081
    94  0000                     _PORTB	set	3969
    95  0000                     _WPUB	set	3973
    96  0000                     _TRISB	set	3987
    97  0000                     _LATB	set	3978
    98  0000                     _LATD	set	3980
    99  0000                     _LATCbits	set	3979
   100  000811                     STR_3:
   101  000811  2D                 	db	45
   102  000812  57                 	db	87	;'W'
   103  000813  72                 	db	114	;'r'
   104  000814  6F                 	db	111	;'o'
   105  000815  6E                 	db	110	;'n'
   106  000816  67                 	db	103	;'g'
   107  000817  20                 	db	32
   108  000818  46                 	db	70	;'F'
   109  000819  75                 	db	117	;'u'
   110  00081A  6E                 	db	110	;'n'
   111  00081B  63                 	db	99	;'c'
   112  00081C  74                 	db	116	;'t'
   113  00081D  69                 	db	105	;'i'
   114  00081E  6F                 	db	111	;'o'
   115  00081F  6E                 	db	110	;'n'
   116  000820  00                 	db	0
   117  000821                     STR_2:
   118  000821  2D                 	db	45
   119  000822  57                 	db	87	;'W'
   120  000823  72                 	db	114	;'r'
   121  000824  6F                 	db	111	;'o'
   122  000825  6E                 	db	110	;'n'
   123  000826  67                 	db	103	;'g'
   124  000827  20                 	db	32
   125  000828  49                 	db	73	;'I'
   126  000829  6E                 	db	110	;'n'
   127  00082A  70                 	db	112	;'p'
   128  00082B  75                 	db	117	;'u'
   129  00082C  74                 	db	116	;'t'
   130  00082D  00                 	db	0
   131  00082E                     STR_1:
   132  00082E  2D                 	db	45
   133  00082F  2D                 	db	45
   134  000830  00                 	db	0
   135  000831  00                 	db	0	; dummy byte at the end
   136  0000                     
   137                           ; #config settings
   138                           
   139                           	psect	cinit
   140  001050                     __pcinit:
   141                           	callstack 0
   142  001050                     start_initialization:
   143                           	callstack 0
   144  001050                     __initialization:
   145                           	callstack 0
   146                           
   147                           ; Clear objects allocated to COMRAM (6 bytes)
   148  001050  6A1A               	clrf	(__pbssCOMRAM+5)& (0+255),c
   149  001052  6A19               	clrf	(__pbssCOMRAM+4)& (0+255),c
   150  001054  6A18               	clrf	(__pbssCOMRAM+3)& (0+255),c
   151  001056  6A17               	clrf	(__pbssCOMRAM+2)& (0+255),c
   152  001058  6A16               	clrf	(__pbssCOMRAM+1)& (0+255),c
   153  00105A  6A15               	clrf	__pbssCOMRAM& (0+255),c
   154  00105C                     end_of_initialization:
   155                           	callstack 0
   156  00105C                     __end_of__initialization:
   157                           	callstack 0
   158  00105C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   159  00105E  6EF8               	movwf	tblptru,c
   160  001060  0100               	movlb	0
   161  001062  EF21  F005         	goto	_main	;jump to C main() function
   162                           
   163                           	psect	bssCOMRAM
   164  000015                     __pbssCOMRAM:
   165                           	callstack 0
   166  000015                     _num2:
   167                           	callstack 0
   168  000015                     	ds	2
   169  000017                     _num1:
   170                           	callstack 0
   171  000017                     	ds	2
   172  000019                     _oper:
   173                           	callstack 0
   174  000019                     	ds	1
   175  00001A                     _key:
   176                           	callstack 0
   177  00001A                     	ds	1
   178                           
   179                           	psect	cstackCOMRAM
   180  000001                     __pcstackCOMRAM:
   181                           	callstack 0
   182  000001                     ??_send_to_LCD:
   183  000001                     ??_kbd_scanner:
   184  000001                     ?___wmul:
   185                           	callstack 0
   186  000001                     ?___awdiv:
   187                           	callstack 0
   188  000001                     LCD_cmd@cx:
   189                           	callstack 0
   190  000001                     ___wmul@multiplier:
   191                           	callstack 0
   192  000001                     ___awdiv@dividend:
   193                           	callstack 0
   194                           
   195                           ; 2 bytes @ 0x0
   196  000001                     	ds	1
   197  000002                     ??_LCD_init:
   198                           
   199                           ; 1 bytes @ 0x1
   200  000002                     	ds	1
   201  000003                     ??_get_Key:
   202  000003                     send_to_LCD@xy:
   203                           	callstack 0
   204  000003                     ___wmul@multiplicand:
   205                           	callstack 0
   206  000003                     ___awdiv@divisor:
   207                           	callstack 0
   208                           
   209                           ; 2 bytes @ 0x2
   210  000003                     	ds	1
   211  000004                     write_string_LCD@s:
   212                           	callstack 0
   213                           
   214                           ; 2 bytes @ 0x3
   215  000004                     	ds	1
   216  000005                     ___awdiv@counter:
   217                           	callstack 0
   218  000005                     ___wmul@product:
   219                           	callstack 0
   220                           
   221                           ; 2 bytes @ 0x4
   222  000005                     	ds	1
   223  000006                     ___awdiv@sign:
   224                           	callstack 0
   225  000006                     disp_Error@numb:
   226                           	callstack 0
   227                           
   228                           ; 2 bytes @ 0x5
   229  000006                     	ds	1
   230  000007                     ___awdiv@quotient:
   231                           	callstack 0
   232                           
   233                           ; 2 bytes @ 0x6
   234  000007                     	ds	1
   235  000008                     ??_disp_Error:
   236                           
   237                           ; 1 bytes @ 0x7
   238  000008                     	ds	1
   239  000009                     disp_Res@numb:
   240                           	callstack 0
   241                           
   242                           ; 2 bytes @ 0x8
   243  000009                     	ds	1
   244  00000A                     ?_get_Num:
   245                           	callstack 0
   246  00000A                     get_Func@chf:
   247                           	callstack 0
   248                           
   249                           ; 1 bytes @ 0x9
   250  00000A                     	ds	1
   251  00000B                     disp_Res@UnitDigit:
   252                           	callstack 0
   253                           
   254                           ; 1 bytes @ 0xA
   255  00000B                     	ds	1
   256  00000C                     ??_get_Num:
   257  00000C                     disp_Res@TenthDigit:
   258                           	callstack 0
   259                           
   260                           ; 1 bytes @ 0xB
   261  00000C                     	ds	2
   262  00000E                     get_Num@ch:
   263                           	callstack 0
   264                           
   265                           ; 1 bytes @ 0xD
   266  00000E                     	ds	1
   267  00000F                     get_Num@num:
   268                           	callstack 0
   269                           
   270                           ; 2 bytes @ 0xE
   271  00000F                     	ds	2
   272  000011                     ??_main:
   273                           
   274                           ; 1 bytes @ 0x10
   275  000011                     	ds	2
   276  000013                     _main$876:
   277                           	callstack 0
   278                           
   279                           ; 2 bytes @ 0x12
   280  000013                     	ds	2
   281                           
   282 ;;
   283 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   284 ;;
   285 ;; *************** function _main *****************
   286 ;; Defined at:
   287 ;;		line 22 in file "mainP7.c"
   288 ;; Parameters:    Size  Location     Type
   289 ;;		None
   290 ;; Auto vars:     Size  Location     Type
   291 ;;		None
   292 ;; Return value:  Size  Location     Type
   293 ;;                  1    wreg      void 
   294 ;; Registers used:
   295 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   296 ;; Tracked objects:
   297 ;;		On entry : 0/0
   298 ;;		On exit  : 0/0
   299 ;;		Unchanged: 0/0
   300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   301 ;;      Params:         0       0       0       0       0       0       0       0       0
   302 ;;      Locals:         2       0       0       0       0       0       0       0       0
   303 ;;      Temps:          2       0       0       0       0       0       0       0       0
   304 ;;      Totals:         4       0       0       0       0       0       0       0       0
   305 ;;Total ram usage:        4 bytes
   306 ;; Hardware stack levels required when called: 4
   307 ;; This function calls:
   308 ;;		_LCD_cmd
   309 ;;		_LCD_init
   310 ;;		___awdiv
   311 ;;		___wmul
   312 ;;		_disp_Error
   313 ;;		_disp_Res
   314 ;;		_get_Func
   315 ;;		_get_Key
   316 ;;		_get_Num
   317 ;;		_kbd_init
   318 ;;		_send_to_LCD
   319 ;; This function is called by:
   320 ;;		Startup code after reset
   321 ;; This function uses a non-reentrant model
   322 ;;
   323                           
   324                           	psect	text0
   325  000A42                     __ptext0:
   326                           	callstack 0
   327  000A42                     _main:
   328                           	callstack 27
   329  000A42                     
   330                           ;mainP7.c: 23:     OSCCON = 0x74;
   331  000A42  0E74               	movlw	116
   332  000A44  6ED3               	movwf	211,c	;volatile
   333  000A46                     
   334                           ;mainP7.c: 24:     LCD_init();
   335  000A46  EC5E  F007         	call	_LCD_init	;wreg free
   336  000A4A                     
   337                           ;mainP7.c: 25:     kbd_init();
   338  000A4A  EC3D  F008         	call	_kbd_init	;wreg free
   339  000A4E                     l1785:
   340                           
   341                           ;mainP7.c: 27:         key = get_Key();
   342  000A4E  ECC7  F007         	call	_get_Key	;wreg free
   343  000A52  6E1A               	movwf	_key^0,c
   344  000A54                     
   345                           ;mainP7.c: 28:         send_to_LCD(key);
   346  000A54  501A               	movf	_key^0,w,c
   347  000A56  EC00  F008         	call	_send_to_LCD
   348  000A5A                     
   349                           ;mainP7.c: 29:         num1 = get_Num(key);
   350  000A5A  501A               	movf	_key^0,w,c
   351  000A5C  ECFB  F005         	call	_get_Num
   352  000A60  C00A  F017         	movff	?_get_Num,_num1
   353  000A64  C00B  F018         	movff	?_get_Num+1,_num1+1
   354  000A68                     
   355                           ;mainP7.c: 30:         if (num1 != 13){
   356  000A68  0E0D               	movlw	13
   357  000A6A  1817               	xorwf	_num1^0,w,c
   358  000A6C  1018               	iorwf	(_num1+1)^0,w,c
   359  000A6E  B4D8               	btfsc	status,2,c
   360  000A70  EF3C  F005         	goto	u361
   361  000A74  EF3E  F005         	goto	u360
   362  000A78                     u361:
   363  000A78  EF27  F005         	goto	l1785
   364  000A7C                     u360:
   365  000A7C                     
   366                           ;mainP7.c: 31:             key = get_Key();
   367  000A7C  ECC7  F007         	call	_get_Key	;wreg free
   368  000A80  6E1A               	movwf	_key^0,c
   369  000A82                     
   370                           ;mainP7.c: 32:             send_to_LCD(key);
   371  000A82  501A               	movf	_key^0,w,c
   372  000A84  EC00  F008         	call	_send_to_LCD
   373  000A88                     
   374                           ;mainP7.c: 33:             oper = get_Func(key);
   375  000A88  501A               	movf	_key^0,w,c
   376  000A8A  ECEB  F006         	call	_get_Func
   377  000A8E  6E19               	movwf	_oper^0,c
   378  000A90                     
   379                           ;mainP7.c: 34:             if (oper != 'e'){
   380  000A90  0E65               	movlw	101
   381  000A92  1819               	xorwf	_oper^0,w,c
   382  000A94  B4D8               	btfsc	status,2,c
   383  000A96  EF4F  F005         	goto	u371
   384  000A9A  EF51  F005         	goto	u370
   385  000A9E                     u371:
   386  000A9E  EF27  F005         	goto	l1785
   387  000AA2                     u370:
   388  000AA2                     
   389                           ;mainP7.c: 35:                 key = get_Key();
   390  000AA2  ECC7  F007         	call	_get_Key	;wreg free
   391  000AA6  6E1A               	movwf	_key^0,c
   392  000AA8                     
   393                           ;mainP7.c: 36:                 send_to_LCD(key);
   394  000AA8  501A               	movf	_key^0,w,c
   395  000AAA  EC00  F008         	call	_send_to_LCD
   396  000AAE                     
   397                           ;mainP7.c: 37:                 num2 = get_Num(key);
   398  000AAE  501A               	movf	_key^0,w,c
   399  000AB0  ECFB  F005         	call	_get_Num
   400  000AB4  C00A  F015         	movff	?_get_Num,_num2
   401  000AB8  C00B  F016         	movff	?_get_Num+1,_num2+1
   402  000ABC                     
   403                           ;mainP7.c: 38:                 if (num2 != 13){
   404  000ABC  0E0D               	movlw	13
   405  000ABE  1815               	xorwf	_num2^0,w,c
   406  000AC0  1016               	iorwf	(_num2+1)^0,w,c
   407  000AC2  B4D8               	btfsc	status,2,c
   408  000AC4  EF66  F005         	goto	u381
   409  000AC8  EF68  F005         	goto	u380
   410  000ACC                     u381:
   411  000ACC  EF27  F005         	goto	l1785
   412  000AD0                     u380:
   413  000AD0                     
   414                           ;mainP7.c: 39:                     key = get_Key();
   415  000AD0  ECC7  F007         	call	_get_Key	;wreg free
   416  000AD4  6E1A               	movwf	_key^0,c
   417  000AD6                     
   418                           ;mainP7.c: 40:                     send_to_LCD(key);
   419  000AD6  501A               	movf	_key^0,w,c
   420  000AD8  EC00  F008         	call	_send_to_LCD
   421  000ADC                     
   422                           ;mainP7.c: 41:                     if (key == '='){
   423  000ADC  0E3D               	movlw	61
   424  000ADE  181A               	xorwf	_key^0,w,c
   425  000AE0  A4D8               	btfss	status,2,c
   426  000AE2  EF75  F005         	goto	u391
   427  000AE6  EF77  F005         	goto	u390
   428  000AEA                     u391:
   429  000AEA  EFE1  F005         	goto	l1839
   430  000AEE                     u390:
   431  000AEE                     
   432                           ;mainP7.c: 42:                         LCD_cmd(0xC0);
   433  000AEE  0EC0               	movlw	192
   434  000AF0  EC33  F008         	call	_LCD_cmd
   435                           
   436                           ;mainP7.c: 43:                         switch (oper){
   437  000AF4  EFC4  F005         	goto	l1837
   438  000AF8                     l1817:
   439  000AF8  5015               	movf	_num2^0,w,c
   440  000AFA  2417               	addwf	_num1^0,w,c
   441  000AFC  6E09               	movwf	disp_Res@numb^0,c
   442  000AFE  5016               	movf	(_num2+1)^0,w,c
   443  000B00  2018               	addwfc	(_num1+1)^0,w,c
   444  000B02  6E0A               	movwf	(disp_Res@numb+1)^0,c
   445  000B04  EC29  F007         	call	_disp_Res	;wreg free
   446  000B08  0E02               	movlw	2
   447  000B0A  EC33  F008         	call	_LCD_cmd
   448  000B0E  EF27  F005         	goto	l1785
   449  000B12                     l1821:
   450  000B12  5015               	movf	_num2^0,w,c
   451  000B14  5C17               	subwf	_num1^0,w,c
   452  000B16  6E09               	movwf	disp_Res@numb^0,c
   453  000B18  5016               	movf	(_num2+1)^0,w,c
   454  000B1A  5818               	subwfb	(_num1+1)^0,w,c
   455  000B1C  6E0A               	movwf	(disp_Res@numb+1)^0,c
   456  000B1E  EC29  F007         	call	_disp_Res	;wreg free
   457  000B22  0E02               	movlw	2
   458  000B24  EC33  F008         	call	_LCD_cmd
   459  000B28  EF27  F005         	goto	l1785
   460  000B2C                     l1825:
   461  000B2C  C017  F001         	movff	_num1,___wmul@multiplier
   462  000B30  C018  F002         	movff	_num1+1,___wmul@multiplier+1
   463  000B34  C015  F003         	movff	_num2,___wmul@multiplicand
   464  000B38  C016  F004         	movff	_num2+1,___wmul@multiplicand+1
   465  000B3C  EC15  F008         	call	___wmul	;wreg free
   466  000B40  C001  F009         	movff	?___wmul,disp_Res@numb
   467  000B44  C002  F00A         	movff	?___wmul+1,disp_Res@numb+1
   468  000B48  EC29  F007         	call	_disp_Res	;wreg free
   469  000B4C  0E02               	movlw	2
   470  000B4E  EC33  F008         	call	_LCD_cmd
   471  000B52  EF27  F005         	goto	l1785
   472  000B56                     l1829:
   473  000B56  C017  F001         	movff	_num1,___awdiv@dividend
   474  000B5A  C018  F002         	movff	_num1+1,___awdiv@dividend+1
   475  000B5E  C015  F003         	movff	_num2,___awdiv@divisor
   476  000B62  C016  F004         	movff	_num2+1,___awdiv@divisor+1
   477  000B66  EC89  F006         	call	___awdiv	;wreg free
   478  000B6A  C001  F013         	movff	?___awdiv,_main$876
   479  000B6E  C002  F014         	movff	?___awdiv+1,_main$876+1
   480  000B72  C013  F009         	movff	_main$876,disp_Res@numb
   481  000B76  C014  F00A         	movff	_main$876+1,disp_Res@numb+1
   482  000B7A  EC29  F007         	call	_disp_Res	;wreg free
   483  000B7E  0E02               	movlw	2
   484  000B80  EC33  F008         	call	_LCD_cmd
   485  000B84  EF27  F005         	goto	l1785
   486  000B88                     l1837:
   487  000B88  5019               	movf	_oper^0,w,c
   488  000B8A  6E11               	movwf	??_main^0,c
   489  000B8C  6A12               	clrf	(??_main+1)^0,c
   490                           
   491                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   492                           ; Switch size 1, requested type "simple"
   493                           ; Number of cases is 1, Range of values is 0 to 0
   494                           ; switch strategies available:
   495                           ; Name         Instructions Cycles
   496                           ; simple_byte            4     3 (average)
   497                           ;	Chosen strategy is simple_byte
   498  000B8E  5012               	movf	(??_main+1)^0,w,c
   499  000B90  0A00               	xorlw	0	; case 0
   500  000B92  B4D8               	btfsc	status,2,c
   501  000B94  EFCE  F005         	goto	l1989
   502  000B98  EFF7  F005         	goto	l39
   503  000B9C                     l1989:
   504                           
   505                           ; Switch size 1, requested type "simple"
   506                           ; Number of cases is 4, Range of values is 42 to 47
   507                           ; switch strategies available:
   508                           ; Name         Instructions Cycles
   509                           ; simple_byte           13     7 (average)
   510                           ;	Chosen strategy is simple_byte
   511  000B9C  5011               	movf	??_main^0,w,c
   512  000B9E  0A2A               	xorlw	42	; case 42
   513  000BA0  B4D8               	btfsc	status,2,c
   514  000BA2  EF96  F005         	goto	l1825
   515  000BA6  0A01               	xorlw	1	; case 43
   516  000BA8  B4D8               	btfsc	status,2,c
   517  000BAA  EF7C  F005         	goto	l1817
   518  000BAE  0A06               	xorlw	6	; case 45
   519  000BB0  B4D8               	btfsc	status,2,c
   520  000BB2  EF89  F005         	goto	l1821
   521  000BB6  0A02               	xorlw	2	; case 47
   522  000BB8  B4D8               	btfsc	status,2,c
   523  000BBA  EFAB  F005         	goto	l1829
   524  000BBE  EFF7  F005         	goto	l39
   525  000BC2                     l1839:
   526  000BC2  0E43               	movlw	67
   527  000BC4  181A               	xorwf	_key^0,w,c
   528  000BC6  A4D8               	btfss	status,2,c
   529  000BC8  EFE8  F005         	goto	u401
   530  000BCC  EFEA  F005         	goto	u400
   531  000BD0                     u401:
   532  000BD0  EFEF  F005         	goto	l1843
   533  000BD4                     u400:
   534  000BD4                     
   535                           ;mainP7.c: 50:                         LCD_cmd(0b00000001);
   536  000BD4  0E01               	movlw	1
   537  000BD6  EC33  F008         	call	_LCD_cmd
   538                           
   539                           ;mainP7.c: 51:                     } else disp_Error(0);
   540  000BDA  EF27  F005         	goto	l1785
   541  000BDE                     l1843:
   542  000BDE  0E00               	movlw	0
   543  000BE0  6E07               	movwf	(disp_Error@numb+1)^0,c
   544  000BE2  0E00               	movlw	0
   545  000BE4  6E06               	movwf	disp_Error@numb^0,c
   546  000BE6  EC93  F007         	call	_disp_Error	;wreg free
   547  000BEA  EF27  F005         	goto	l1785
   548  000BEE                     l39:
   549  000BEE  EF27  F005         	goto	l1785
   550  000BF2  EF00  F000         	goto	start
   551  000BF6                     __end_of_main:
   552                           	callstack 0
   553                           
   554 ;; *************** function _kbd_init *****************
   555 ;; Defined at:
   556 ;;		line 5 in file "4x4_kbd_Driver.c"
   557 ;; Parameters:    Size  Location     Type
   558 ;;		None
   559 ;; Auto vars:     Size  Location     Type
   560 ;;		None
   561 ;; Return value:  Size  Location     Type
   562 ;;                  1    wreg      void 
   563 ;; Registers used:
   564 ;;		wreg, status,2
   565 ;; Tracked objects:
   566 ;;		On entry : 0/0
   567 ;;		On exit  : 0/0
   568 ;;		Unchanged: 0/0
   569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   570 ;;      Params:         0       0       0       0       0       0       0       0       0
   571 ;;      Locals:         0       0       0       0       0       0       0       0       0
   572 ;;      Temps:          0       0       0       0       0       0       0       0       0
   573 ;;      Totals:         0       0       0       0       0       0       0       0       0
   574 ;;Total ram usage:        0 bytes
   575 ;; Hardware stack levels used: 1
   576 ;; This function calls:
   577 ;;		Nothing
   578 ;; This function is called by:
   579 ;;		_main
   580 ;; This function uses a non-reentrant model
   581 ;;
   582                           
   583                           	psect	text1
   584  00107A                     __ptext1:
   585                           	callstack 0
   586  00107A                     _kbd_init:
   587                           	callstack 30
   588  00107A  0E00               	movlw	0
   589  00107C  010F               	movlb	15	; () banked
   590  00107E  6F5C               	movwf	92,b	;volatile
   591  001080  0E0F               	movlw	15
   592  001082  6E93               	movwf	147,c	;volatile
   593  001084  0E0F               	movlw	15
   594  001086  6E85               	movwf	133,c	;volatile
   595  001088                     
   596                           ; BSR set to: 15
   597  001088  9EF1               	bcf	241,7,c	;volatile
   598  00108A                     
   599                           ; BSR set to: 15
   600  00108A  0012               	return		;funcret
   601  00108C                     __end_of_kbd_init:
   602                           	callstack 0
   603                           
   604 ;; *************** function _get_Num *****************
   605 ;; Defined at:
   606 ;;		line 57 in file "mainP7.c"
   607 ;; Parameters:    Size  Location     Type
   608 ;;  ch              1    wreg     unsigned char 
   609 ;; Auto vars:     Size  Location     Type
   610 ;;  ch              1   13[COMRAM] unsigned char 
   611 ;;  num             2   14[COMRAM] int 
   612 ;; Return value:  Size  Location     Type
   613 ;;                  2    9[COMRAM] int 
   614 ;; Registers used:
   615 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   616 ;; Tracked objects:
   617 ;;		On entry : 0/0
   618 ;;		On exit  : 0/0
   619 ;;		Unchanged: 0/0
   620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   621 ;;      Params:         2       0       0       0       0       0       0       0       0
   622 ;;      Locals:         3       0       0       0       0       0       0       0       0
   623 ;;      Temps:          2       0       0       0       0       0       0       0       0
   624 ;;      Totals:         7       0       0       0       0       0       0       0       0
   625 ;;Total ram usage:        7 bytes
   626 ;; Hardware stack levels used: 1
   627 ;; Hardware stack levels required when called: 3
   628 ;; This function calls:
   629 ;;		_LCD_cmd
   630 ;;		_disp_Error
   631 ;; This function is called by:
   632 ;;		_main
   633 ;; This function uses a non-reentrant model
   634 ;;
   635                           
   636                           	psect	text2
   637  000BF6                     __ptext2:
   638                           	callstack 0
   639  000BF6                     _get_Num:
   640                           	callstack 27
   641                           
   642                           ; BSR set to: 15
   643                           ;incstack = 0
   644                           ;get_Num@ch stored from wreg
   645  000BF6  6E0E               	movwf	get_Num@ch^0,c
   646  000BF8                     
   647                           ;mainP7.c: 59:     switch(ch){
   648  000BF8  EF4B  F006         	goto	l1723
   649  000BFC                     l1693:
   650  000BFC  0E00               	movlw	0
   651  000BFE  6E10               	movwf	(get_Num@num+1)^0,c
   652  000C00  0E00               	movlw	0
   653  000C02  6E0F               	movwf	get_Num@num^0,c
   654  000C04  EF84  F006         	goto	l58
   655  000C08                     l1695:
   656  000C08  0E00               	movlw	0
   657  000C0A  6E10               	movwf	(get_Num@num+1)^0,c
   658  000C0C  0E01               	movlw	1
   659  000C0E  6E0F               	movwf	get_Num@num^0,c
   660  000C10  EF84  F006         	goto	l58
   661  000C14                     l1697:
   662  000C14  0E00               	movlw	0
   663  000C16  6E10               	movwf	(get_Num@num+1)^0,c
   664  000C18  0E02               	movlw	2
   665  000C1A  6E0F               	movwf	get_Num@num^0,c
   666  000C1C  EF84  F006         	goto	l58
   667  000C20                     l1699:
   668  000C20  0E00               	movlw	0
   669  000C22  6E10               	movwf	(get_Num@num+1)^0,c
   670  000C24  0E03               	movlw	3
   671  000C26  6E0F               	movwf	get_Num@num^0,c
   672  000C28  EF84  F006         	goto	l58
   673  000C2C                     l1701:
   674  000C2C  0E00               	movlw	0
   675  000C2E  6E10               	movwf	(get_Num@num+1)^0,c
   676  000C30  0E04               	movlw	4
   677  000C32  6E0F               	movwf	get_Num@num^0,c
   678  000C34  EF84  F006         	goto	l58
   679  000C38                     l1703:
   680  000C38  0E00               	movlw	0
   681  000C3A  6E10               	movwf	(get_Num@num+1)^0,c
   682  000C3C  0E05               	movlw	5
   683  000C3E  6E0F               	movwf	get_Num@num^0,c
   684  000C40  EF84  F006         	goto	l58
   685  000C44                     l1705:
   686  000C44  0E00               	movlw	0
   687  000C46  6E10               	movwf	(get_Num@num+1)^0,c
   688  000C48  0E06               	movlw	6
   689  000C4A  6E0F               	movwf	get_Num@num^0,c
   690  000C4C  EF84  F006         	goto	l58
   691  000C50                     l1707:
   692  000C50  0E00               	movlw	0
   693  000C52  6E10               	movwf	(get_Num@num+1)^0,c
   694  000C54  0E07               	movlw	7
   695  000C56  6E0F               	movwf	get_Num@num^0,c
   696  000C58  EF84  F006         	goto	l58
   697  000C5C                     l1709:
   698  000C5C  0E00               	movlw	0
   699  000C5E  6E10               	movwf	(get_Num@num+1)^0,c
   700  000C60  0E08               	movlw	8
   701  000C62  6E0F               	movwf	get_Num@num^0,c
   702  000C64  EF84  F006         	goto	l58
   703  000C68                     l1711:
   704  000C68  0E00               	movlw	0
   705  000C6A  6E10               	movwf	(get_Num@num+1)^0,c
   706  000C6C  0E09               	movlw	9
   707  000C6E  6E0F               	movwf	get_Num@num^0,c
   708  000C70  EF84  F006         	goto	l58
   709  000C74                     l1713:
   710                           
   711                           ;mainP7.c: 71:         LCD_cmd(0b00000001);
   712  000C74  0E01               	movlw	1
   713  000C76  EC33  F008         	call	_LCD_cmd
   714  000C7A                     l1715:
   715                           
   716                           ;mainP7.c: 72:         num = 13;
   717  000C7A  0E00               	movlw	0
   718  000C7C  6E10               	movwf	(get_Num@num+1)^0,c
   719  000C7E  0E0D               	movlw	13
   720  000C80  6E0F               	movwf	get_Num@num^0,c
   721                           
   722                           ;mainP7.c: 73:         break;
   723  000C82  EF84  F006         	goto	l58
   724  000C86                     l1717:
   725                           
   726                           ;mainP7.c: 75:         disp_Error(0);
   727  000C86  0E00               	movlw	0
   728  000C88  6E07               	movwf	(disp_Error@numb+1)^0,c
   729  000C8A  0E00               	movlw	0
   730  000C8C  6E06               	movwf	disp_Error@numb^0,c
   731  000C8E  EC93  F007         	call	_disp_Error	;wreg free
   732  000C92  EF3D  F006         	goto	l1715
   733  000C96                     l1723:
   734  000C96  500E               	movf	get_Num@ch^0,w,c
   735  000C98  6E0C               	movwf	??_get_Num^0,c
   736  000C9A  6A0D               	clrf	(??_get_Num+1)^0,c
   737                           
   738                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   739                           ; Switch size 1, requested type "simple"
   740                           ; Number of cases is 1, Range of values is 0 to 0
   741                           ; switch strategies available:
   742                           ; Name         Instructions Cycles
   743                           ; simple_byte            4     3 (average)
   744                           ;	Chosen strategy is simple_byte
   745  000C9C  500D               	movf	(??_get_Num+1)^0,w,c
   746  000C9E  0A00               	xorlw	0	; case 0
   747  000CA0  B4D8               	btfsc	status,2,c
   748  000CA2  EF55  F006         	goto	l1991
   749  000CA6  EF43  F006         	goto	l1717
   750  000CAA                     l1991:
   751                           
   752                           ; Switch size 1, requested type "simple"
   753                           ; Number of cases is 11, Range of values is 48 to 67
   754                           ; switch strategies available:
   755                           ; Name         Instructions Cycles
   756                           ; simple_byte           34    18 (average)
   757                           ;	Chosen strategy is simple_byte
   758  000CAA  500C               	movf	??_get_Num^0,w,c
   759  000CAC  0A30               	xorlw	48	; case 48
   760  000CAE  B4D8               	btfsc	status,2,c
   761  000CB0  EFFE  F005         	goto	l1693
   762  000CB4  0A01               	xorlw	1	; case 49
   763  000CB6  B4D8               	btfsc	status,2,c
   764  000CB8  EF04  F006         	goto	l1695
   765  000CBC  0A03               	xorlw	3	; case 50
   766  000CBE  B4D8               	btfsc	status,2,c
   767  000CC0  EF0A  F006         	goto	l1697
   768  000CC4  0A01               	xorlw	1	; case 51
   769  000CC6  B4D8               	btfsc	status,2,c
   770  000CC8  EF10  F006         	goto	l1699
   771  000CCC  0A07               	xorlw	7	; case 52
   772  000CCE  B4D8               	btfsc	status,2,c
   773  000CD0  EF16  F006         	goto	l1701
   774  000CD4  0A01               	xorlw	1	; case 53
   775  000CD6  B4D8               	btfsc	status,2,c
   776  000CD8  EF1C  F006         	goto	l1703
   777  000CDC  0A03               	xorlw	3	; case 54
   778  000CDE  B4D8               	btfsc	status,2,c
   779  000CE0  EF22  F006         	goto	l1705
   780  000CE4  0A01               	xorlw	1	; case 55
   781  000CE6  B4D8               	btfsc	status,2,c
   782  000CE8  EF28  F006         	goto	l1707
   783  000CEC  0A0F               	xorlw	15	; case 56
   784  000CEE  B4D8               	btfsc	status,2,c
   785  000CF0  EF2E  F006         	goto	l1709
   786  000CF4  0A01               	xorlw	1	; case 57
   787  000CF6  B4D8               	btfsc	status,2,c
   788  000CF8  EF34  F006         	goto	l1711
   789  000CFC  0A7A               	xorlw	122	; case 67
   790  000CFE  B4D8               	btfsc	status,2,c
   791  000D00  EF3A  F006         	goto	l1713
   792  000D04  EF43  F006         	goto	l1717
   793  000D08                     l58:
   794                           
   795                           ;mainP7.c: 79:     return num;
   796  000D08  C00F  F00A         	movff	get_Num@num,?_get_Num
   797  000D0C  C010  F00B         	movff	get_Num@num+1,?_get_Num+1
   798  000D10  0012               	return		;funcret
   799  000D12                     __end_of_get_Num:
   800                           	callstack 0
   801                           
   802 ;; *************** function _get_Key *****************
   803 ;; Defined at:
   804 ;;		line 49 in file "4x4_kbd_Driver.c"
   805 ;; Parameters:    Size  Location     Type
   806 ;;		None
   807 ;; Auto vars:     Size  Location     Type
   808 ;;		None
   809 ;; Return value:  Size  Location     Type
   810 ;;                  1    wreg      unsigned char 
   811 ;; Registers used:
   812 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   813 ;; Tracked objects:
   814 ;;		On entry : 0/0
   815 ;;		On exit  : 0/0
   816 ;;		Unchanged: 0/0
   817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   818 ;;      Params:         0       0       0       0       0       0       0       0       0
   819 ;;      Locals:         0       0       0       0       0       0       0       0       0
   820 ;;      Temps:          2       0       0       0       0       0       0       0       0
   821 ;;      Totals:         2       0       0       0       0       0       0       0       0
   822 ;;Total ram usage:        2 bytes
   823 ;; Hardware stack levels used: 1
   824 ;; Hardware stack levels required when called: 1
   825 ;; This function calls:
   826 ;;		_kbd_scanner
   827 ;; This function is called by:
   828 ;;		_main
   829 ;; This function uses a non-reentrant model
   830 ;;
   831                           
   832                           	psect	text3
   833  000F8E                     __ptext3:
   834                           	callstack 0
   835  000F8E                     _get_Key:
   836                           	callstack 29
   837  000F8E  0E78               	movlw	120
   838  000F90  6E1A               	movwf	_key^0,c
   839  000F92  EFDA  F007         	goto	l1685
   840  000F96                     l1681:
   841  000F96  EC19  F004         	call	_kbd_scanner	;wreg free
   842  000F9A  6E1A               	movwf	_key^0,c
   843  000F9C  0E02               	movlw	2
   844  000F9E  6E04               	movwf	(??_get_Key+1)^0,c
   845  000FA0  0E04               	movlw	4
   846  000FA2  6E03               	movwf	??_get_Key^0,c
   847  000FA4  0EBA               	movlw	186
   848  000FA6                     u417:
   849  000FA6  2EE8               	decfsz	wreg,f,c
   850  000FA8  D7FE               	bra	u417
   851  000FAA  2E03               	decfsz	??_get_Key^0,f,c
   852  000FAC  D7FC               	bra	u417
   853  000FAE  2E04               	decfsz	(??_get_Key+1)^0,f,c
   854  000FB0  D7FA               	bra	u417
   855  000FB2  D000               	nop2	
   856  000FB4                     l1685:
   857  000FB4  0E78               	movlw	120
   858  000FB6  181A               	xorwf	_key^0,w,c
   859  000FB8  B4D8               	btfsc	status,2,c
   860  000FBA  EFE1  F007         	goto	u281
   861  000FBE  EFE3  F007         	goto	u280
   862  000FC2                     u281:
   863  000FC2  EFCB  F007         	goto	l1681
   864  000FC6                     u280:
   865  000FC6  501A               	movf	_key^0,w,c
   866  000FC8  0012               	return		;funcret
   867  000FCA                     __end_of_get_Key:
   868                           	callstack 0
   869                           
   870 ;; *************** function _kbd_scanner *****************
   871 ;; Defined at:
   872 ;;		line 16 in file "4x4_kbd_Driver.c"
   873 ;; Parameters:    Size  Location     Type
   874 ;;		None
   875 ;; Auto vars:     Size  Location     Type
   876 ;;		None
   877 ;; Return value:  Size  Location     Type
   878 ;;                  1    wreg      unsigned char 
   879 ;; Registers used:
   880 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
   881 ;; Tracked objects:
   882 ;;		On entry : 0/0
   883 ;;		On exit  : 0/0
   884 ;;		Unchanged: 0/0
   885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   886 ;;      Params:         0       0       0       0       0       0       0       0       0
   887 ;;      Locals:         0       0       0       0       0       0       0       0       0
   888 ;;      Temps:          2       0       0       0       0       0       0       0       0
   889 ;;      Totals:         2       0       0       0       0       0       0       0       0
   890 ;;Total ram usage:        2 bytes
   891 ;; Hardware stack levels used: 1
   892 ;; This function calls:
   893 ;;		Nothing
   894 ;; This function is called by:
   895 ;;		_get_Key
   896 ;; This function uses a non-reentrant model
   897 ;;
   898                           
   899                           	psect	text4
   900  000832                     __ptext4:
   901                           	callstack 0
   902  000832                     _kbd_scanner:
   903                           	callstack 29
   904  000832  0EE0               	movlw	224
   905  000834  6E8A               	movwf	138,c	;volatile
   906  000836  EF3D  F004         	goto	l1491
   907  00083A                     l1465:
   908  00083A  0E01               	movlw	low _kbdMatrix
   909  00083C  6EF6               	movwf	tblptrl,c
   910  00083E                     	if	1	;There is more than 1 active tblptr byte
   911  00083E  0E08               	movlw	high _kbdMatrix
   912  000840  6EF7               	movwf	tblptrh,c
   913  000842                     	endif
   914  000842                     	if	0	;There are less than 3 active tblptr bytes
   915  000842                     	endif
   916  000842  0008               	tblrd		*
   917  000844  50F5               	movf	tablat,w,c
   918  000846  EF20  F005         	goto	l114
   919  00084A                     l1471:
   920  00084A  0E02               	movlw	low (_kbdMatrix+1)
   921  00084C  6EF6               	movwf	tblptrl,c
   922  00084E  0E08               	movlw	high (_kbdMatrix+1)
   923  000850  6EF7               	movwf	tblptrh,c
   924  000852                     	if	0	;tblptru may be non-zero
   925  000852                     	endif
   926  000852                     	if	0	;tblptru may be non-zero
   927  000852                     	endif
   928  000852  0008               	tblrd		*
   929  000854  50F5               	movf	tablat,w,c
   930  000856  EF20  F005         	goto	l114
   931  00085A                     l1477:
   932  00085A  0E03               	movlw	low (_kbdMatrix+2)
   933  00085C  6EF6               	movwf	tblptrl,c
   934  00085E  0E08               	movlw	high (_kbdMatrix+2)
   935  000860  6EF7               	movwf	tblptrh,c
   936  000862                     	if	0	;tblptru may be non-zero
   937  000862                     	endif
   938  000862                     	if	0	;tblptru may be non-zero
   939  000862                     	endif
   940  000862  0008               	tblrd		*
   941  000864  50F5               	movf	tablat,w,c
   942  000866  EF20  F005         	goto	l114
   943  00086A                     l1483:
   944  00086A  0E04               	movlw	low (_kbdMatrix+3)
   945  00086C  6EF6               	movwf	tblptrl,c
   946  00086E  0E08               	movlw	high (_kbdMatrix+3)
   947  000870  6EF7               	movwf	tblptrh,c
   948  000872                     	if	0	;tblptru may be non-zero
   949  000872                     	endif
   950  000872                     	if	0	;tblptru may be non-zero
   951  000872                     	endif
   952  000872  0008               	tblrd		*
   953  000874  50F5               	movf	tablat,w,c
   954  000876  EF20  F005         	goto	l114
   955  00087A                     l1491:
   956  00087A  5081               	movf	129,w,c	;volatile
   957  00087C  6E01               	movwf	??_kbd_scanner^0,c
   958  00087E  6A02               	clrf	(??_kbd_scanner+1)^0,c
   959                           
   960                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   961                           ; Switch size 1, requested type "simple"
   962                           ; Number of cases is 1, Range of values is 0 to 0
   963                           ; switch strategies available:
   964                           ; Name         Instructions Cycles
   965                           ; simple_byte            4     3 (average)
   966                           ;	Chosen strategy is simple_byte
   967  000880  5002               	movf	(??_kbd_scanner+1)^0,w,c
   968  000882  0A00               	xorlw	0	; case 0
   969  000884  B4D8               	btfsc	status,2,c
   970  000886  EF47  F004         	goto	l1993
   971  00088A  EF5A  F004         	goto	l1493
   972  00088E                     l1993:
   973                           
   974                           ; Switch size 1, requested type "simple"
   975                           ; Number of cases is 4, Range of values is 231 to 238
   976                           ; switch strategies available:
   977                           ; Name         Instructions Cycles
   978                           ; simple_byte           13     7 (average)
   979                           ;	Chosen strategy is simple_byte
   980  00088E  5001               	movf	??_kbd_scanner^0,w,c
   981  000890  0AE7               	xorlw	231	; case 231
   982  000892  B4D8               	btfsc	status,2,c
   983  000894  EF35  F004         	goto	l1483
   984  000898  0A0C               	xorlw	12	; case 235
   985  00089A  B4D8               	btfsc	status,2,c
   986  00089C  EF2D  F004         	goto	l1477
   987  0008A0  0A06               	xorlw	6	; case 237
   988  0008A2  B4D8               	btfsc	status,2,c
   989  0008A4  EF25  F004         	goto	l1471
   990  0008A8  0A03               	xorlw	3	; case 238
   991  0008AA  B4D8               	btfsc	status,2,c
   992  0008AC  EF1D  F004         	goto	l1465
   993  0008B0  EF5A  F004         	goto	l1493
   994  0008B4                     l1493:
   995  0008B4  0ED0               	movlw	208
   996  0008B6  6E8A               	movwf	138,c	;volatile
   997  0008B8  EF7E  F004         	goto	l1521
   998  0008BC                     l1495:
   999  0008BC  0E05               	movlw	low (_kbdMatrix+4)
  1000  0008BE  6EF6               	movwf	tblptrl,c
  1001  0008C0  0E08               	movlw	high (_kbdMatrix+4)
  1002  0008C2  6EF7               	movwf	tblptrh,c
  1003  0008C4                     	if	0	;tblptru may be non-zero
  1004  0008C4                     	endif
  1005  0008C4                     	if	0	;tblptru may be non-zero
  1006  0008C4                     	endif
  1007  0008C4  0008               	tblrd		*
  1008  0008C6  50F5               	movf	tablat,w,c
  1009  0008C8  EF20  F005         	goto	l114
  1010  0008CC                     l1501:
  1011  0008CC  0E06               	movlw	low (_kbdMatrix+5)
  1012  0008CE  6EF6               	movwf	tblptrl,c
  1013  0008D0  0E08               	movlw	high (_kbdMatrix+5)
  1014  0008D2  6EF7               	movwf	tblptrh,c
  1015  0008D4                     	if	0	;tblptru may be non-zero
  1016  0008D4                     	endif
  1017  0008D4                     	if	0	;tblptru may be non-zero
  1018  0008D4                     	endif
  1019  0008D4  0008               	tblrd		*
  1020  0008D6  50F5               	movf	tablat,w,c
  1021  0008D8  EF20  F005         	goto	l114
  1022  0008DC                     l1507:
  1023  0008DC  0E07               	movlw	low (_kbdMatrix+6)
  1024  0008DE  6EF6               	movwf	tblptrl,c
  1025  0008E0  0E08               	movlw	high (_kbdMatrix+6)
  1026  0008E2  6EF7               	movwf	tblptrh,c
  1027  0008E4                     	if	0	;tblptru may be non-zero
  1028  0008E4                     	endif
  1029  0008E4                     	if	0	;tblptru may be non-zero
  1030  0008E4                     	endif
  1031  0008E4  0008               	tblrd		*
  1032  0008E6  50F5               	movf	tablat,w,c
  1033  0008E8  EF20  F005         	goto	l114
  1034  0008EC                     l1513:
  1035  0008EC  0E08               	movlw	low (_kbdMatrix+7)
  1036  0008EE  6EF6               	movwf	tblptrl,c
  1037  0008F0  0E08               	movlw	high (_kbdMatrix+7)
  1038  0008F2  6EF7               	movwf	tblptrh,c
  1039  0008F4                     	if	0	;tblptru may be non-zero
  1040  0008F4                     	endif
  1041  0008F4                     	if	0	;tblptru may be non-zero
  1042  0008F4                     	endif
  1043  0008F4  0008               	tblrd		*
  1044  0008F6  50F5               	movf	tablat,w,c
  1045  0008F8  EF20  F005         	goto	l114
  1046  0008FC                     l1521:
  1047  0008FC  5081               	movf	129,w,c	;volatile
  1048  0008FE  6E01               	movwf	??_kbd_scanner^0,c
  1049  000900  6A02               	clrf	(??_kbd_scanner+1)^0,c
  1050                           
  1051                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1052                           ; Switch size 1, requested type "simple"
  1053                           ; Number of cases is 1, Range of values is 0 to 0
  1054                           ; switch strategies available:
  1055                           ; Name         Instructions Cycles
  1056                           ; simple_byte            4     3 (average)
  1057                           ;	Chosen strategy is simple_byte
  1058  000902  5002               	movf	(??_kbd_scanner+1)^0,w,c
  1059  000904  0A00               	xorlw	0	; case 0
  1060  000906  B4D8               	btfsc	status,2,c
  1061  000908  EF88  F004         	goto	l1995
  1062  00090C  EF9B  F004         	goto	l1523
  1063  000910                     l1995:
  1064                           
  1065                           ; Switch size 1, requested type "simple"
  1066                           ; Number of cases is 4, Range of values is 215 to 222
  1067                           ; switch strategies available:
  1068                           ; Name         Instructions Cycles
  1069                           ; simple_byte           13     7 (average)
  1070                           ;	Chosen strategy is simple_byte
  1071  000910  5001               	movf	??_kbd_scanner^0,w,c
  1072  000912  0AD7               	xorlw	215	; case 215
  1073  000914  B4D8               	btfsc	status,2,c
  1074  000916  EF76  F004         	goto	l1513
  1075  00091A  0A0C               	xorlw	12	; case 219
  1076  00091C  B4D8               	btfsc	status,2,c
  1077  00091E  EF6E  F004         	goto	l1507
  1078  000922  0A06               	xorlw	6	; case 221
  1079  000924  B4D8               	btfsc	status,2,c
  1080  000926  EF66  F004         	goto	l1501
  1081  00092A  0A03               	xorlw	3	; case 222
  1082  00092C  B4D8               	btfsc	status,2,c
  1083  00092E  EF5E  F004         	goto	l1495
  1084  000932  EF9B  F004         	goto	l1523
  1085  000936                     l1523:
  1086  000936  0EB0               	movlw	176
  1087  000938  6E8A               	movwf	138,c	;volatile
  1088  00093A  EFBF  F004         	goto	l1551
  1089  00093E                     l1525:
  1090  00093E  0E09               	movlw	low (_kbdMatrix+8)
  1091  000940  6EF6               	movwf	tblptrl,c
  1092  000942  0E08               	movlw	high (_kbdMatrix+8)
  1093  000944  6EF7               	movwf	tblptrh,c
  1094  000946                     	if	0	;tblptru may be non-zero
  1095  000946                     	endif
  1096  000946                     	if	0	;tblptru may be non-zero
  1097  000946                     	endif
  1098  000946  0008               	tblrd		*
  1099  000948  50F5               	movf	tablat,w,c
  1100  00094A  EF20  F005         	goto	l114
  1101  00094E                     l1531:
  1102  00094E  0E0A               	movlw	low (_kbdMatrix+9)
  1103  000950  6EF6               	movwf	tblptrl,c
  1104  000952  0E08               	movlw	high (_kbdMatrix+9)
  1105  000954  6EF7               	movwf	tblptrh,c
  1106  000956                     	if	0	;tblptru may be non-zero
  1107  000956                     	endif
  1108  000956                     	if	0	;tblptru may be non-zero
  1109  000956                     	endif
  1110  000956  0008               	tblrd		*
  1111  000958  50F5               	movf	tablat,w,c
  1112  00095A  EF20  F005         	goto	l114
  1113  00095E                     l1537:
  1114  00095E  0E0B               	movlw	low (_kbdMatrix+10)
  1115  000960  6EF6               	movwf	tblptrl,c
  1116  000962  0E08               	movlw	high (_kbdMatrix+10)
  1117  000964  6EF7               	movwf	tblptrh,c
  1118  000966                     	if	0	;tblptru may be non-zero
  1119  000966                     	endif
  1120  000966                     	if	0	;tblptru may be non-zero
  1121  000966                     	endif
  1122  000966  0008               	tblrd		*
  1123  000968  50F5               	movf	tablat,w,c
  1124  00096A  EF20  F005         	goto	l114
  1125  00096E                     l1543:
  1126  00096E  0E0C               	movlw	low (_kbdMatrix+11)
  1127  000970  6EF6               	movwf	tblptrl,c
  1128  000972  0E08               	movlw	high (_kbdMatrix+11)
  1129  000974  6EF7               	movwf	tblptrh,c
  1130  000976                     	if	0	;tblptru may be non-zero
  1131  000976                     	endif
  1132  000976                     	if	0	;tblptru may be non-zero
  1133  000976                     	endif
  1134  000976  0008               	tblrd		*
  1135  000978  50F5               	movf	tablat,w,c
  1136  00097A  EF20  F005         	goto	l114
  1137  00097E                     l1551:
  1138  00097E  5081               	movf	129,w,c	;volatile
  1139  000980  6E01               	movwf	??_kbd_scanner^0,c
  1140  000982  6A02               	clrf	(??_kbd_scanner+1)^0,c
  1141                           
  1142                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1143                           ; Switch size 1, requested type "simple"
  1144                           ; Number of cases is 1, Range of values is 0 to 0
  1145                           ; switch strategies available:
  1146                           ; Name         Instructions Cycles
  1147                           ; simple_byte            4     3 (average)
  1148                           ;	Chosen strategy is simple_byte
  1149  000984  5002               	movf	(??_kbd_scanner+1)^0,w,c
  1150  000986  0A00               	xorlw	0	; case 0
  1151  000988  B4D8               	btfsc	status,2,c
  1152  00098A  EFC9  F004         	goto	l1997
  1153  00098E  EFDC  F004         	goto	l1553
  1154  000992                     l1997:
  1155                           
  1156                           ; Switch size 1, requested type "simple"
  1157                           ; Number of cases is 4, Range of values is 183 to 190
  1158                           ; switch strategies available:
  1159                           ; Name         Instructions Cycles
  1160                           ; simple_byte           13     7 (average)
  1161                           ;	Chosen strategy is simple_byte
  1162  000992  5001               	movf	??_kbd_scanner^0,w,c
  1163  000994  0AB7               	xorlw	183	; case 183
  1164  000996  B4D8               	btfsc	status,2,c
  1165  000998  EFB7  F004         	goto	l1543
  1166  00099C  0A0C               	xorlw	12	; case 187
  1167  00099E  B4D8               	btfsc	status,2,c
  1168  0009A0  EFAF  F004         	goto	l1537
  1169  0009A4  0A06               	xorlw	6	; case 189
  1170  0009A6  B4D8               	btfsc	status,2,c
  1171  0009A8  EFA7  F004         	goto	l1531
  1172  0009AC  0A03               	xorlw	3	; case 190
  1173  0009AE  B4D8               	btfsc	status,2,c
  1174  0009B0  EF9F  F004         	goto	l1525
  1175  0009B4  EFDC  F004         	goto	l1553
  1176  0009B8                     l1553:
  1177  0009B8  0E70               	movlw	112
  1178  0009BA  6E8A               	movwf	138,c	;volatile
  1179  0009BC  EF00  F005         	goto	l1581
  1180  0009C0                     l1555:
  1181  0009C0  0E0D               	movlw	low (_kbdMatrix+12)
  1182  0009C2  6EF6               	movwf	tblptrl,c
  1183  0009C4  0E08               	movlw	high (_kbdMatrix+12)
  1184  0009C6  6EF7               	movwf	tblptrh,c
  1185  0009C8                     	if	0	;tblptru may be non-zero
  1186  0009C8                     	endif
  1187  0009C8                     	if	0	;tblptru may be non-zero
  1188  0009C8                     	endif
  1189  0009C8  0008               	tblrd		*
  1190  0009CA  50F5               	movf	tablat,w,c
  1191  0009CC  EF20  F005         	goto	l114
  1192  0009D0                     l1561:
  1193  0009D0  0E0E               	movlw	low (_kbdMatrix+13)
  1194  0009D2  6EF6               	movwf	tblptrl,c
  1195  0009D4  0E08               	movlw	high (_kbdMatrix+13)
  1196  0009D6  6EF7               	movwf	tblptrh,c
  1197  0009D8                     	if	0	;tblptru may be non-zero
  1198  0009D8                     	endif
  1199  0009D8                     	if	0	;tblptru may be non-zero
  1200  0009D8                     	endif
  1201  0009D8  0008               	tblrd		*
  1202  0009DA  50F5               	movf	tablat,w,c
  1203  0009DC  EF20  F005         	goto	l114
  1204  0009E0                     l1567:
  1205  0009E0  0E0F               	movlw	low (_kbdMatrix+14)
  1206  0009E2  6EF6               	movwf	tblptrl,c
  1207  0009E4  0E08               	movlw	high (_kbdMatrix+14)
  1208  0009E6  6EF7               	movwf	tblptrh,c
  1209  0009E8                     	if	0	;tblptru may be non-zero
  1210  0009E8                     	endif
  1211  0009E8                     	if	0	;tblptru may be non-zero
  1212  0009E8                     	endif
  1213  0009E8  0008               	tblrd		*
  1214  0009EA  50F5               	movf	tablat,w,c
  1215  0009EC  EF20  F005         	goto	l114
  1216  0009F0                     l1573:
  1217  0009F0  0E10               	movlw	low (_kbdMatrix+15)
  1218  0009F2  6EF6               	movwf	tblptrl,c
  1219  0009F4  0E08               	movlw	high (_kbdMatrix+15)
  1220  0009F6  6EF7               	movwf	tblptrh,c
  1221  0009F8                     	if	0	;tblptru may be non-zero
  1222  0009F8                     	endif
  1223  0009F8                     	if	0	;tblptru may be non-zero
  1224  0009F8                     	endif
  1225  0009F8  0008               	tblrd		*
  1226  0009FA  50F5               	movf	tablat,w,c
  1227  0009FC  EF20  F005         	goto	l114
  1228  000A00                     l1581:
  1229  000A00  5081               	movf	129,w,c	;volatile
  1230  000A02  6E01               	movwf	??_kbd_scanner^0,c
  1231  000A04  6A02               	clrf	(??_kbd_scanner+1)^0,c
  1232                           
  1233                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1234                           ; Switch size 1, requested type "simple"
  1235                           ; Number of cases is 1, Range of values is 0 to 0
  1236                           ; switch strategies available:
  1237                           ; Name         Instructions Cycles
  1238                           ; simple_byte            4     3 (average)
  1239                           ;	Chosen strategy is simple_byte
  1240  000A06  5002               	movf	(??_kbd_scanner+1)^0,w,c
  1241  000A08  0A00               	xorlw	0	; case 0
  1242  000A0A  B4D8               	btfsc	status,2,c
  1243  000A0C  EF0A  F005         	goto	l1999
  1244  000A10  EF1D  F005         	goto	l1583
  1245  000A14                     l1999:
  1246                           
  1247                           ; Switch size 1, requested type "simple"
  1248                           ; Number of cases is 4, Range of values is 119 to 126
  1249                           ; switch strategies available:
  1250                           ; Name         Instructions Cycles
  1251                           ; simple_byte           13     7 (average)
  1252                           ;	Chosen strategy is simple_byte
  1253  000A14  5001               	movf	??_kbd_scanner^0,w,c
  1254  000A16  0A77               	xorlw	119	; case 119
  1255  000A18  B4D8               	btfsc	status,2,c
  1256  000A1A  EFF8  F004         	goto	l1573
  1257  000A1E  0A0C               	xorlw	12	; case 123
  1258  000A20  B4D8               	btfsc	status,2,c
  1259  000A22  EFF0  F004         	goto	l1567
  1260  000A26  0A06               	xorlw	6	; case 125
  1261  000A28  B4D8               	btfsc	status,2,c
  1262  000A2A  EFE8  F004         	goto	l1561
  1263  000A2E  0A03               	xorlw	3	; case 126
  1264  000A30  B4D8               	btfsc	status,2,c
  1265  000A32  EFE0  F004         	goto	l1555
  1266  000A36  EF1D  F005         	goto	l1583
  1267  000A3A                     l1583:
  1268  000A3A  0E00               	movlw	0
  1269  000A3C  6E8A               	movwf	138,c	;volatile
  1270  000A3E  0E78               	movlw	120
  1271  000A40                     l114:
  1272  000A40  0012               	return		;funcret
  1273  000A42                     __end_of_kbd_scanner:
  1274                           	callstack 0
  1275                           
  1276 ;; *************** function _get_Func *****************
  1277 ;; Defined at:
  1278 ;;		line 81 in file "mainP7.c"
  1279 ;; Parameters:    Size  Location     Type
  1280 ;;  chf             1    wreg     unsigned char 
  1281 ;; Auto vars:     Size  Location     Type
  1282 ;;  chf             1    9[COMRAM] unsigned char 
  1283 ;; Return value:  Size  Location     Type
  1284 ;;                  1    wreg      unsigned char 
  1285 ;; Registers used:
  1286 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1287 ;; Tracked objects:
  1288 ;;		On entry : 0/0
  1289 ;;		On exit  : 0/0
  1290 ;;		Unchanged: 0/0
  1291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1292 ;;      Params:         0       0       0       0       0       0       0       0       0
  1293 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1294 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1295 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1296 ;;Total ram usage:        1 bytes
  1297 ;; Hardware stack levels used: 1
  1298 ;; Hardware stack levels required when called: 3
  1299 ;; This function calls:
  1300 ;;		_LCD_cmd
  1301 ;;		_disp_Error
  1302 ;; This function is called by:
  1303 ;;		_main
  1304 ;; This function uses a non-reentrant model
  1305 ;;
  1306                           
  1307                           	psect	text5
  1308  000DD6                     __ptext5:
  1309                           	callstack 0
  1310  000DD6                     _get_Func:
  1311                           	callstack 27
  1312                           
  1313                           ;incstack = 0
  1314                           ;get_Func@chf stored from wreg
  1315  000DD6  6E0A               	movwf	get_Func@chf^0,c
  1316  000DD8                     
  1317                           ;mainP7.c: 82:     if(chf=='C'){
  1318  000DD8  0E43               	movlw	67
  1319  000DDA  180A               	xorwf	get_Func@chf^0,w,c
  1320  000DDC  A4D8               	btfss	status,2,c
  1321  000DDE  EFF3  F006         	goto	u291
  1322  000DE2  EFF5  F006         	goto	u290
  1323  000DE6                     u291:
  1324  000DE6  EFFB  F006         	goto	l1737
  1325  000DEA                     u290:
  1326  000DEA                     
  1327                           ;mainP7.c: 83:         LCD_cmd(0b00000001);
  1328  000DEA  0E01               	movlw	1
  1329  000DEC  EC33  F008         	call	_LCD_cmd
  1330  000DF0                     l1733:
  1331                           
  1332                           ;mainP7.c: 84:         return 'e';
  1333  000DF0  0E65               	movlw	101
  1334  000DF2  EF28  F007         	goto	l74
  1335  000DF6                     l1737:
  1336                           
  1337                           ;mainP7.c: 86:     if( chf!='+' && chf!='-' && chf!='*' && chf!='/' ){
  1338  000DF6  0E2B               	movlw	43
  1339  000DF8  180A               	xorwf	get_Func@chf^0,w,c
  1340  000DFA  B4D8               	btfsc	status,2,c
  1341  000DFC  EF02  F007         	goto	u301
  1342  000E00  EF04  F007         	goto	u300
  1343  000E04                     u301:
  1344  000E04  EF27  F007         	goto	l1751
  1345  000E08                     u300:
  1346  000E08  0E2D               	movlw	45
  1347  000E0A  180A               	xorwf	get_Func@chf^0,w,c
  1348  000E0C  B4D8               	btfsc	status,2,c
  1349  000E0E  EF0B  F007         	goto	u311
  1350  000E12  EF0D  F007         	goto	u310
  1351  000E16                     u311:
  1352  000E16  EF27  F007         	goto	l1751
  1353  000E1A                     u310:
  1354  000E1A  0E2A               	movlw	42
  1355  000E1C  180A               	xorwf	get_Func@chf^0,w,c
  1356  000E1E  B4D8               	btfsc	status,2,c
  1357  000E20  EF14  F007         	goto	u321
  1358  000E24  EF16  F007         	goto	u320
  1359  000E28                     u321:
  1360  000E28  EF27  F007         	goto	l1751
  1361  000E2C                     u320:
  1362  000E2C  0E2F               	movlw	47
  1363  000E2E  180A               	xorwf	get_Func@chf^0,w,c
  1364  000E30  B4D8               	btfsc	status,2,c
  1365  000E32  EF1D  F007         	goto	u331
  1366  000E36  EF1F  F007         	goto	u330
  1367  000E3A                     u331:
  1368  000E3A  EF27  F007         	goto	l1751
  1369  000E3E                     u330:
  1370  000E3E                     
  1371                           ;mainP7.c: 87:         disp_Error(1);
  1372  000E3E  0E00               	movlw	0
  1373  000E40  6E07               	movwf	(disp_Error@numb+1)^0,c
  1374  000E42  0E01               	movlw	1
  1375  000E44  6E06               	movwf	disp_Error@numb^0,c
  1376  000E46  EC93  F007         	call	_disp_Error	;wreg free
  1377  000E4A  EFF8  F006         	goto	l1733
  1378  000E4E                     l1751:
  1379                           
  1380                           ;mainP7.c: 90:     return chf;
  1381  000E4E  500A               	movf	get_Func@chf^0,w,c
  1382  000E50                     l74:
  1383  000E50  0012               	return		;funcret
  1384  000E52                     __end_of_get_Func:
  1385                           	callstack 0
  1386                           
  1387 ;; *************** function _disp_Error *****************
  1388 ;; Defined at:
  1389 ;;		line 105 in file "mainP7.c"
  1390 ;; Parameters:    Size  Location     Type
  1391 ;;  numb            2    5[COMRAM] int 
  1392 ;; Auto vars:     Size  Location     Type
  1393 ;;		None
  1394 ;; Return value:  Size  Location     Type
  1395 ;;                  1    wreg      void 
  1396 ;; Registers used:
  1397 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1398 ;; Tracked objects:
  1399 ;;		On entry : 0/0
  1400 ;;		On exit  : 0/0
  1401 ;;		Unchanged: 0/0
  1402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1403 ;;      Params:         2       0       0       0       0       0       0       0       0
  1404 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1405 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1406 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1407 ;;Total ram usage:        4 bytes
  1408 ;; Hardware stack levels used: 1
  1409 ;; Hardware stack levels required when called: 2
  1410 ;; This function calls:
  1411 ;;		_LCD_cmd
  1412 ;;		_write_string_LCD
  1413 ;; This function is called by:
  1414 ;;		_main
  1415 ;;		_get_Num
  1416 ;;		_get_Func
  1417 ;; This function uses a non-reentrant model
  1418 ;;
  1419                           
  1420                           	psect	text6
  1421  000F26                     __ptext6:
  1422                           	callstack 0
  1423  000F26                     _disp_Error:
  1424                           	callstack 27
  1425  000F26                     
  1426                           ;mainP7.c: 106:     LCD_cmd(0b00000001);
  1427  000F26  0E01               	movlw	1
  1428  000F28  EC33  F008         	call	_LCD_cmd
  1429                           
  1430                           ;mainP7.c: 107:     switch(numb){
  1431  000F2C  EFB0  F007         	goto	l1457
  1432  000F30                     l1449:
  1433  000F30  0E21               	movlw	low STR_2
  1434  000F32  6E04               	movwf	write_string_LCD@s^0,c
  1435  000F34  0E08               	movlw	high STR_2
  1436  000F36  6E05               	movwf	(write_string_LCD@s+1)^0,c
  1437  000F38  ECE5  F007         	call	_write_string_LCD	;wreg free
  1438  000F3C  EFC6  F007         	goto	l88
  1439  000F40                     l1451:
  1440  000F40  0E11               	movlw	low STR_3
  1441  000F42  6E04               	movwf	write_string_LCD@s^0,c
  1442  000F44  0E08               	movlw	high STR_3
  1443  000F46  6E05               	movwf	(write_string_LCD@s+1)^0,c
  1444  000F48  ECE5  F007         	call	_write_string_LCD	;wreg free
  1445  000F4C  EFC6  F007         	goto	l88
  1446  000F50                     l1453:
  1447  000F50  0E21               	movlw	low STR_2
  1448  000F52  6E04               	movwf	write_string_LCD@s^0,c
  1449  000F54  0E08               	movlw	high STR_2
  1450  000F56  6E05               	movwf	(write_string_LCD@s+1)^0,c
  1451  000F58  ECE5  F007         	call	_write_string_LCD	;wreg free
  1452  000F5C  EFC6  F007         	goto	l88
  1453  000F60                     l1457:
  1454  000F60  C006  F008         	movff	disp_Error@numb,??_disp_Error
  1455  000F64  C007  F009         	movff	disp_Error@numb+1,??_disp_Error+1
  1456                           
  1457                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1458                           ; Switch size 1, requested type "simple"
  1459                           ; Number of cases is 1, Range of values is 0 to 0
  1460                           ; switch strategies available:
  1461                           ; Name         Instructions Cycles
  1462                           ; simple_byte            4     3 (average)
  1463                           ;	Chosen strategy is simple_byte
  1464  000F68  5009               	movf	(??_disp_Error+1)^0,w,c
  1465  000F6A  0A00               	xorlw	0	; case 0
  1466  000F6C  B4D8               	btfsc	status,2,c
  1467  000F6E  EFBB  F007         	goto	l2001
  1468  000F72  EFA8  F007         	goto	l1453
  1469  000F76                     l2001:
  1470                           
  1471                           ; Switch size 1, requested type "simple"
  1472                           ; Number of cases is 2, Range of values is 0 to 1
  1473                           ; switch strategies available:
  1474                           ; Name         Instructions Cycles
  1475                           ; simple_byte            7     4 (average)
  1476                           ;	Chosen strategy is simple_byte
  1477  000F76  5008               	movf	??_disp_Error^0,w,c
  1478  000F78  0A00               	xorlw	0	; case 0
  1479  000F7A  B4D8               	btfsc	status,2,c
  1480  000F7C  EF98  F007         	goto	l1449
  1481  000F80  0A01               	xorlw	1	; case 1
  1482  000F82  B4D8               	btfsc	status,2,c
  1483  000F84  EFA0  F007         	goto	l1451
  1484  000F88  EFA8  F007         	goto	l1453
  1485  000F8C                     l88:
  1486  000F8C  0012               	return		;funcret
  1487  000F8E                     __end_of_disp_Error:
  1488                           	callstack 0
  1489                           
  1490 ;; *************** function _disp_Res *****************
  1491 ;; Defined at:
  1492 ;;		line 92 in file "mainP7.c"
  1493 ;; Parameters:    Size  Location     Type
  1494 ;;  numb            2    8[COMRAM] int 
  1495 ;; Auto vars:     Size  Location     Type
  1496 ;;  TenthDigit      1   11[COMRAM] unsigned char 
  1497 ;;  UnitDigit       1   10[COMRAM] unsigned char 
  1498 ;; Return value:  Size  Location     Type
  1499 ;;                  1    wreg      void 
  1500 ;; Registers used:
  1501 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1502 ;; Tracked objects:
  1503 ;;		On entry : 0/0
  1504 ;;		On exit  : 0/0
  1505 ;;		Unchanged: 0/0
  1506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1507 ;;      Params:         2       0       0       0       0       0       0       0       0
  1508 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1509 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1510 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1511 ;;Total ram usage:        4 bytes
  1512 ;; Hardware stack levels used: 1
  1513 ;; Hardware stack levels required when called: 2
  1514 ;; This function calls:
  1515 ;;		___awdiv
  1516 ;;		_send_to_LCD
  1517 ;;		_write_string_LCD
  1518 ;; This function is called by:
  1519 ;;		_main
  1520 ;; This function uses a non-reentrant model
  1521 ;;
  1522                           
  1523                           	psect	text7
  1524  000E52                     __ptext7:
  1525                           	callstack 0
  1526  000E52                     _disp_Res:
  1527                           	callstack 28
  1528  000E52                     
  1529                           ;mainP7.c: 94:     unsigned char TenthDigit = 0;
  1530  000E52  0E00               	movlw	0
  1531  000E54  6E0C               	movwf	disp_Res@TenthDigit^0,c
  1532  000E56                     
  1533                           ;mainP7.c: 95:     if(numb < 0){
  1534  000E56  BE0A               	btfsc	(disp_Res@numb+1)^0,7,c
  1535  000E58  EF32  F007         	goto	u340
  1536  000E5C  EF30  F007         	goto	u341
  1537  000E60                     u341:
  1538  000E60  EF3C  F007         	goto	l1763
  1539  000E64                     u340:
  1540  000E64                     
  1541                           ;mainP7.c: 96:         write_string_LCD("--");
  1542  000E64  0E2E               	movlw	low STR_1
  1543  000E66  6E04               	movwf	write_string_LCD@s^0,c
  1544  000E68  0E08               	movlw	high STR_1
  1545  000E6A  6E05               	movwf	(write_string_LCD@s+1)^0,c
  1546  000E6C  ECE5  F007         	call	_write_string_LCD	;wreg free
  1547  000E70                     
  1548                           ;mainP7.c: 97:         numb = -1*numb;
  1549  000E70  6C09               	negf	disp_Res@numb^0,c
  1550  000E72  1E0A               	comf	(disp_Res@numb+1)^0,f,c
  1551  000E74  B0D8               	btfsc	status,0,c
  1552  000E76  2A0A               	incf	(disp_Res@numb+1)^0,f,c
  1553  000E78                     l1763:
  1554                           
  1555                           ;mainP7.c: 99:     TenthDigit = (numb/10);
  1556  000E78  C009  F001         	movff	disp_Res@numb,___awdiv@dividend
  1557  000E7C  C00A  F002         	movff	disp_Res@numb+1,___awdiv@dividend+1
  1558  000E80  0E00               	movlw	0
  1559  000E82  6E04               	movwf	(___awdiv@divisor+1)^0,c
  1560  000E84  0E0A               	movlw	10
  1561  000E86  6E03               	movwf	___awdiv@divisor^0,c
  1562  000E88  EC89  F006         	call	___awdiv	;wreg free
  1563  000E8C  5001               	movf	?___awdiv^0,w,c
  1564  000E8E  6E0C               	movwf	disp_Res@TenthDigit^0,c
  1565  000E90                     
  1566                           ;mainP7.c: 100:     if( TenthDigit != 0)
  1567  000E90  500C               	movf	disp_Res@TenthDigit^0,w,c
  1568  000E92  B4D8               	btfsc	status,2,c
  1569  000E94  EF4E  F007         	goto	u351
  1570  000E98  EF50  F007         	goto	u350
  1571  000E9C                     u351:
  1572  000E9C  EF54  F007         	goto	l1769
  1573  000EA0                     u350:
  1574  000EA0                     
  1575                           ;mainP7.c: 101:         send_to_LCD(TenthDigit+'0');
  1576  000EA0  500C               	movf	disp_Res@TenthDigit^0,w,c
  1577  000EA2  0F30               	addlw	48
  1578  000EA4  EC00  F008         	call	_send_to_LCD
  1579  000EA8                     l1769:
  1580                           
  1581                           ;mainP7.c: 102:     UnitDigit = numb - TenthDigit*10;
  1582  000EA8  500C               	movf	disp_Res@TenthDigit^0,w,c
  1583  000EAA  0DF6               	mullw	246
  1584  000EAC  50F3               	movf	243,w,c
  1585  000EAE  2409               	addwf	disp_Res@numb^0,w,c
  1586  000EB0  6E0B               	movwf	disp_Res@UnitDigit^0,c
  1587  000EB2                     
  1588                           ;mainP7.c: 103:     send_to_LCD(UnitDigit+'0');
  1589  000EB2  500B               	movf	disp_Res@UnitDigit^0,w,c
  1590  000EB4  0F30               	addlw	48
  1591  000EB6  EC00  F008         	call	_send_to_LCD
  1592  000EBA  0012               	return		;funcret
  1593  000EBC                     __end_of_disp_Res:
  1594                           	callstack 0
  1595                           
  1596 ;; *************** function _write_string_LCD *****************
  1597 ;; Defined at:
  1598 ;;		line 41 in file "LCD_disp_Driver.c"
  1599 ;; Parameters:    Size  Location     Type
  1600 ;;  s               2    3[COMRAM] PTR const unsigned char 
  1601 ;;		 -> STR_4(13), STR_3(16), STR_2(13), STR_1(3), 
  1602 ;; Auto vars:     Size  Location     Type
  1603 ;;		None
  1604 ;; Return value:  Size  Location     Type
  1605 ;;                  1    wreg      void 
  1606 ;; Registers used:
  1607 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1608 ;; Tracked objects:
  1609 ;;		On entry : 0/0
  1610 ;;		On exit  : 0/0
  1611 ;;		Unchanged: 0/0
  1612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1613 ;;      Params:         2       0       0       0       0       0       0       0       0
  1614 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1615 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1616 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1617 ;;Total ram usage:        2 bytes
  1618 ;; Hardware stack levels used: 1
  1619 ;; Hardware stack levels required when called: 1
  1620 ;; This function calls:
  1621 ;;		_send_to_LCD
  1622 ;; This function is called by:
  1623 ;;		_disp_Res
  1624 ;;		_disp_Error
  1625 ;; This function uses a non-reentrant model
  1626 ;;
  1627                           
  1628                           	psect	text8
  1629  000FCA                     __ptext8:
  1630                           	callstack 0
  1631  000FCA                     _write_string_LCD:
  1632                           	callstack 27
  1633  000FCA                     
  1634                           ;LCD_disp_Driver.c: 42:     while(*s)
  1635  000FCA  EFF1  F007         	goto	l1445
  1636  000FCE                     l1441:
  1637                           
  1638                           ;LCD_disp_Driver.c: 43:         send_to_LCD(*s++);
  1639  000FCE  C004  FFF6         	movff	write_string_LCD@s,tblptrl
  1640  000FD2  C005  FFF7         	movff	write_string_LCD@s+1,tblptrh
  1641  000FD6                     	if	0	;tblptru may be non-zero
  1642  000FD6                     	endif
  1643  000FD6                     	if	0	;tblptru may be non-zero
  1644  000FD6                     	endif
  1645  000FD6  0008               	tblrd		*
  1646  000FD8  50F5               	movf	tablat,w,c
  1647  000FDA  EC00  F008         	call	_send_to_LCD
  1648  000FDE  4A04               	infsnz	write_string_LCD@s^0,f,c
  1649  000FE0  2A05               	incf	(write_string_LCD@s+1)^0,f,c
  1650  000FE2                     l1445:
  1651                           
  1652                           ;LCD_disp_Driver.c: 42:     while(*s)
  1653  000FE2  C004  FFF6         	movff	write_string_LCD@s,tblptrl
  1654  000FE6  C005  FFF7         	movff	write_string_LCD@s+1,tblptrh
  1655  000FEA                     	if	0	;tblptru may be non-zero
  1656  000FEA                     	endif
  1657  000FEA                     	if	0	;tblptru may be non-zero
  1658  000FEA                     	endif
  1659  000FEA  0008               	tblrd		*
  1660  000FEC  50F5               	movf	tablat,w,c
  1661  000FEE  0900               	iorlw	0
  1662  000FF0  A4D8               	btfss	status,2,c
  1663  000FF2  EFFD  F007         	goto	u211
  1664  000FF6  EFFF  F007         	goto	u210
  1665  000FFA                     u211:
  1666  000FFA  EFE7  F007         	goto	l1441
  1667  000FFE                     u210:
  1668  000FFE  0012               	return		;funcret
  1669  001000                     __end_of_write_string_LCD:
  1670                           	callstack 0
  1671                           
  1672 ;; *************** function _send_to_LCD *****************
  1673 ;; Defined at:
  1674 ;;		line 31 in file "LCD_disp_Driver.c"
  1675 ;; Parameters:    Size  Location     Type
  1676 ;;  xy              1    wreg     unsigned char 
  1677 ;; Auto vars:     Size  Location     Type
  1678 ;;  xy              1    2[COMRAM] unsigned char 
  1679 ;; Return value:  Size  Location     Type
  1680 ;;                  1    wreg      void 
  1681 ;; Registers used:
  1682 ;;		wreg, status,2, cstack
  1683 ;; Tracked objects:
  1684 ;;		On entry : 0/0
  1685 ;;		On exit  : 0/0
  1686 ;;		Unchanged: 0/0
  1687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1688 ;;      Params:         0       0       0       0       0       0       0       0       0
  1689 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1690 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1691 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1692 ;;Total ram usage:        3 bytes
  1693 ;; Hardware stack levels used: 1
  1694 ;; This function calls:
  1695 ;;		Nothing
  1696 ;; This function is called by:
  1697 ;;		_main
  1698 ;;		_disp_Res
  1699 ;;		_write_string_LCD
  1700 ;; This function uses a non-reentrant model
  1701 ;;
  1702                           
  1703                           	psect	text9
  1704  001000                     __ptext9:
  1705                           	callstack 0
  1706  001000                     _send_to_LCD:
  1707                           	callstack 30
  1708                           
  1709                           ;incstack = 0
  1710                           ;send_to_LCD@xy stored from wreg
  1711  001000  6E03               	movwf	send_to_LCD@xy^0,c
  1712  001002                     
  1713                           ;LCD_disp_Driver.c: 32:     LATCbits.LATC2 = 1;
  1714  001002  848B               	bsf	139,2,c	;volatile
  1715                           
  1716                           ;LCD_disp_Driver.c: 33:     LATCbits.LATC1 = 0;
  1717  001004  928B               	bcf	139,1,c	;volatile
  1718                           
  1719                           ;LCD_disp_Driver.c: 34:     LATCbits.LATC0 = 1;
  1720  001006  808B               	bsf	139,0,c	;volatile
  1721  001008                     
  1722                           ;LCD_disp_Driver.c: 35:     LATD = xy;
  1723  001008  C003  FF8C         	movff	send_to_LCD@xy,3980	;volatile
  1724  00100C                     
  1725                           ;LCD_disp_Driver.c: 36:     __nop();
  1726  00100C  F000               	nop	
  1727  00100E                     
  1728                           ;LCD_disp_Driver.c: 37:     __nop();
  1729  00100E  F000               	nop	
  1730  001010                     
  1731                           ;LCD_disp_Driver.c: 38:     LATCbits.LATC0 = 0;
  1732  001010  908B               	bcf	139,0,c	;volatile
  1733  001012                     
  1734                           ;LCD_disp_Driver.c: 39:     _delay((unsigned long)((250)*(8000000/4000.0)));
  1735  001012  0E03               	movlw	3
  1736  001014  6E02               	movwf	(??_send_to_LCD+1)^0,c
  1737  001016  0E8A               	movlw	138
  1738  001018  6E01               	movwf	??_send_to_LCD^0,c
  1739  00101A  0E56               	movlw	86
  1740  00101C                     u427:
  1741  00101C  2EE8               	decfsz	wreg,f,c
  1742  00101E  D7FE               	bra	u427
  1743  001020  2E01               	decfsz	??_send_to_LCD^0,f,c
  1744  001022  D7FC               	bra	u427
  1745  001024  2E02               	decfsz	(??_send_to_LCD+1)^0,f,c
  1746  001026  D7FA               	bra	u427
  1747  001028  0012               	return		;funcret
  1748  00102A                     __end_of_send_to_LCD:
  1749                           	callstack 0
  1750                           
  1751 ;; *************** function ___awdiv *****************
  1752 ;; Defined at:
  1753 ;;		line 7 in file "D:\MPLABxIDE\pic\sources\c99\common\awdiv.c"
  1754 ;; Parameters:    Size  Location     Type
  1755 ;;  dividend        2    0[COMRAM] int 
  1756 ;;  divisor         2    2[COMRAM] int 
  1757 ;; Auto vars:     Size  Location     Type
  1758 ;;  quotient        2    6[COMRAM] int 
  1759 ;;  sign            1    5[COMRAM] unsigned char 
  1760 ;;  counter         1    4[COMRAM] unsigned char 
  1761 ;; Return value:  Size  Location     Type
  1762 ;;                  2    0[COMRAM] int 
  1763 ;; Registers used:
  1764 ;;		wreg, status,2, status,0
  1765 ;; Tracked objects:
  1766 ;;		On entry : 0/0
  1767 ;;		On exit  : 0/0
  1768 ;;		Unchanged: 0/0
  1769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1770 ;;      Params:         4       0       0       0       0       0       0       0       0
  1771 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1772 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1773 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1774 ;;Total ram usage:        8 bytes
  1775 ;; Hardware stack levels used: 1
  1776 ;; This function calls:
  1777 ;;		Nothing
  1778 ;; This function is called by:
  1779 ;;		_main
  1780 ;;		_disp_Res
  1781 ;; This function uses a non-reentrant model
  1782 ;;
  1783                           
  1784                           	psect	text10
  1785  000D12                     __ptext10:
  1786                           	callstack 0
  1787  000D12                     ___awdiv:
  1788                           	callstack 29
  1789  000D12  0E00               	movlw	0
  1790  000D14  6E06               	movwf	___awdiv@sign^0,c
  1791  000D16  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  1792  000D18  EF92  F006         	goto	u220
  1793  000D1C  EF90  F006         	goto	u221
  1794  000D20                     u221:
  1795  000D20  EF98  F006         	goto	l1613
  1796  000D24                     u220:
  1797  000D24  6C03               	negf	___awdiv@divisor^0,c
  1798  000D26  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  1799  000D28  B0D8               	btfsc	status,0,c
  1800  000D2A  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  1801  000D2C  0E01               	movlw	1
  1802  000D2E  6E06               	movwf	___awdiv@sign^0,c
  1803  000D30                     l1613:
  1804  000D30  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  1805  000D32  EF9F  F006         	goto	u230
  1806  000D36  EF9D  F006         	goto	u231
  1807  000D3A                     u231:
  1808  000D3A  EFA5  F006         	goto	l1619
  1809  000D3E                     u230:
  1810  000D3E  6C01               	negf	___awdiv@dividend^0,c
  1811  000D40  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  1812  000D42  B0D8               	btfsc	status,0,c
  1813  000D44  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  1814  000D46  0E01               	movlw	1
  1815  000D48  1A06               	xorwf	___awdiv@sign^0,f,c
  1816  000D4A                     l1619:
  1817  000D4A  0E00               	movlw	0
  1818  000D4C  6E08               	movwf	(___awdiv@quotient+1)^0,c
  1819  000D4E  0E00               	movlw	0
  1820  000D50  6E07               	movwf	___awdiv@quotient^0,c
  1821  000D52  5003               	movf	___awdiv@divisor^0,w,c
  1822  000D54  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  1823  000D56  B4D8               	btfsc	status,2,c
  1824  000D58  EFB0  F006         	goto	u241
  1825  000D5C  EFB2  F006         	goto	u240
  1826  000D60                     u241:
  1827  000D60  EFDA  F006         	goto	l1641
  1828  000D64                     u240:
  1829  000D64  0E01               	movlw	1
  1830  000D66  6E05               	movwf	___awdiv@counter^0,c
  1831  000D68  EFBA  F006         	goto	l1627
  1832  000D6C                     l1625:
  1833  000D6C  90D8               	bcf	status,0,c
  1834  000D6E  3603               	rlcf	___awdiv@divisor^0,f,c
  1835  000D70  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  1836  000D72  2A05               	incf	___awdiv@counter^0,f,c
  1837  000D74                     l1627:
  1838  000D74  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  1839  000D76  EFBF  F006         	goto	u251
  1840  000D7A  EFC1  F006         	goto	u250
  1841  000D7E                     u251:
  1842  000D7E  EFB6  F006         	goto	l1625
  1843  000D82                     u250:
  1844  000D82                     l1629:
  1845  000D82  90D8               	bcf	status,0,c
  1846  000D84  3607               	rlcf	___awdiv@quotient^0,f,c
  1847  000D86  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  1848  000D88  5003               	movf	___awdiv@divisor^0,w,c
  1849  000D8A  5C01               	subwf	___awdiv@dividend^0,w,c
  1850  000D8C  5004               	movf	(___awdiv@divisor+1)^0,w,c
  1851  000D8E  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  1852  000D90  A0D8               	btfss	status,0,c
  1853  000D92  EFCD  F006         	goto	u261
  1854  000D96  EFCF  F006         	goto	u260
  1855  000D9A                     u261:
  1856  000D9A  EFD4  F006         	goto	l1637
  1857  000D9E                     u260:
  1858  000D9E  5003               	movf	___awdiv@divisor^0,w,c
  1859  000DA0  5E01               	subwf	___awdiv@dividend^0,f,c
  1860  000DA2  5004               	movf	(___awdiv@divisor+1)^0,w,c
  1861  000DA4  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  1862  000DA6  8007               	bsf	___awdiv@quotient^0,0,c
  1863  000DA8                     l1637:
  1864  000DA8  90D8               	bcf	status,0,c
  1865  000DAA  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  1866  000DAC  3203               	rrcf	___awdiv@divisor^0,f,c
  1867  000DAE  2E05               	decfsz	___awdiv@counter^0,f,c
  1868  000DB0  EFC1  F006         	goto	l1629
  1869  000DB4                     l1641:
  1870  000DB4  5006               	movf	___awdiv@sign^0,w,c
  1871  000DB6  B4D8               	btfsc	status,2,c
  1872  000DB8  EFE0  F006         	goto	u271
  1873  000DBC  EFE2  F006         	goto	u270
  1874  000DC0                     u271:
  1875  000DC0  EFE6  F006         	goto	l1645
  1876  000DC4                     u270:
  1877  000DC4  6C07               	negf	___awdiv@quotient^0,c
  1878  000DC6  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  1879  000DC8  B0D8               	btfsc	status,0,c
  1880  000DCA  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  1881  000DCC                     l1645:
  1882  000DCC  C007  F001         	movff	___awdiv@quotient,?___awdiv
  1883  000DD0  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  1884  000DD4  0012               	return		;funcret
  1885  000DD6                     __end_of___awdiv:
  1886                           	callstack 0
  1887                           
  1888 ;; *************** function ___wmul *****************
  1889 ;; Defined at:
  1890 ;;		line 15 in file "D:\MPLABxIDE\pic\sources\c99\common\Umul16.c"
  1891 ;; Parameters:    Size  Location     Type
  1892 ;;  multiplier      2    0[COMRAM] unsigned int 
  1893 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1894 ;; Auto vars:     Size  Location     Type
  1895 ;;  product         2    4[COMRAM] unsigned int 
  1896 ;; Return value:  Size  Location     Type
  1897 ;;                  2    0[COMRAM] unsigned int 
  1898 ;; Registers used:
  1899 ;;		wreg, status,2, status,0, prodl, prodh
  1900 ;; Tracked objects:
  1901 ;;		On entry : 0/0
  1902 ;;		On exit  : 0/0
  1903 ;;		Unchanged: 0/0
  1904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1905 ;;      Params:         4       0       0       0       0       0       0       0       0
  1906 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1907 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1908 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1909 ;;Total ram usage:        6 bytes
  1910 ;; Hardware stack levels used: 1
  1911 ;; This function calls:
  1912 ;;		Nothing
  1913 ;; This function is called by:
  1914 ;;		_main
  1915 ;; This function uses a non-reentrant model
  1916 ;;
  1917                           
  1918                           	psect	text11
  1919  00102A                     __ptext11:
  1920                           	callstack 0
  1921  00102A                     ___wmul:
  1922                           	callstack 30
  1923  00102A  5001               	movf	___wmul@multiplier^0,w,c
  1924  00102C  0203               	mulwf	___wmul@multiplicand^0,c
  1925  00102E  CFF3 F005          	movff	prodl,___wmul@product
  1926  001032  CFF4 F006          	movff	prodh,___wmul@product+1
  1927  001036  5001               	movf	___wmul@multiplier^0,w,c
  1928  001038  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  1929  00103A  50F3               	movf	243,w,c
  1930  00103C  2606               	addwf	(___wmul@product+1)^0,f,c
  1931  00103E  5002               	movf	(___wmul@multiplier+1)^0,w,c
  1932  001040  0203               	mulwf	___wmul@multiplicand^0,c
  1933  001042  50F3               	movf	243,w,c
  1934  001044  2606               	addwf	(___wmul@product+1)^0,f,c
  1935  001046  C005  F001         	movff	___wmul@product,?___wmul
  1936  00104A  C006  F002         	movff	___wmul@product+1,?___wmul+1
  1937  00104E  0012               	return		;funcret
  1938  001050                     __end_of___wmul:
  1939                           	callstack 0
  1940                           
  1941 ;; *************** function _LCD_init *****************
  1942 ;; Defined at:
  1943 ;;		line 5 in file "LCD_disp_Driver.c"
  1944 ;; Parameters:    Size  Location     Type
  1945 ;;		None
  1946 ;; Auto vars:     Size  Location     Type
  1947 ;;		None
  1948 ;; Return value:  Size  Location     Type
  1949 ;;                  1    wreg      void 
  1950 ;; Registers used:
  1951 ;;		wreg, status,2, cstack
  1952 ;; Tracked objects:
  1953 ;;		On entry : 0/0
  1954 ;;		On exit  : 0/0
  1955 ;;		Unchanged: 0/0
  1956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1957 ;;      Params:         0       0       0       0       0       0       0       0       0
  1958 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1959 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1960 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1961 ;;Total ram usage:        2 bytes
  1962 ;; Hardware stack levels used: 1
  1963 ;; Hardware stack levels required when called: 1
  1964 ;; This function calls:
  1965 ;;		_LCD_cmd
  1966 ;; This function is called by:
  1967 ;;		_main
  1968 ;; This function uses a non-reentrant model
  1969 ;;
  1970                           
  1971                           	psect	text12
  1972  000EBC                     __ptext12:
  1973                           	callstack 0
  1974  000EBC                     _LCD_init:
  1975                           	callstack 29
  1976  000EBC                     
  1977                           ;LCD_disp_Driver.c: 6:     TRISD = 0x00;
  1978  000EBC  0E00               	movlw	0
  1979  000EBE  6E95               	movwf	149,c	;volatile
  1980  000EC0                     
  1981                           ;LCD_disp_Driver.c: 7:     LATCbits.LATC2 = 0;
  1982  000EC0  948B               	bcf	139,2,c	;volatile
  1983  000EC2                     
  1984                           ;LCD_disp_Driver.c: 8:     LATCbits.LATC1 = 0;
  1985  000EC2  928B               	bcf	139,1,c	;volatile
  1986  000EC4                     
  1987                           ;LCD_disp_Driver.c: 9:     LATCbits.LATC0 = 0;
  1988  000EC4  908B               	bcf	139,0,c	;volatile
  1989                           
  1990                           ;LCD_disp_Driver.c: 10:     LATC = 0;
  1991  000EC6  0E00               	movlw	0
  1992  000EC8  6E8B               	movwf	139,c	;volatile
  1993  000ECA                     
  1994                           ;LCD_disp_Driver.c: 11:     TRISCbits.TRISC0 = 0;
  1995  000ECA  9094               	bcf	148,0,c	;volatile
  1996  000ECC                     
  1997                           ;LCD_disp_Driver.c: 12:     TRISCbits.TRISC2 = 0;
  1998  000ECC  9494               	bcf	148,2,c	;volatile
  1999  000ECE                     
  2000                           ;LCD_disp_Driver.c: 13:     TRISCbits.TRISC1 = 0;
  2001  000ECE  9294               	bcf	148,1,c	;volatile
  2002  000ED0                     
  2003                           ;LCD_disp_Driver.c: 14:     LCD_cmd(0b00111000);
  2004  000ED0  0E38               	movlw	56
  2005  000ED2  EC33  F008         	call	_LCD_cmd
  2006  000ED6                     
  2007                           ;LCD_disp_Driver.c: 15:     _delay((unsigned long)((250)*(8000000/4000.0)));
  2008  000ED6  0E03               	movlw	3
  2009  000ED8  6E03               	movwf	(??_LCD_init+1)^0,c
  2010  000EDA  0E8A               	movlw	138
  2011  000EDC  6E02               	movwf	??_LCD_init^0,c
  2012  000EDE  0E56               	movlw	86
  2013  000EE0                     u437:
  2014  000EE0  2EE8               	decfsz	wreg,f,c
  2015  000EE2  D7FE               	bra	u437
  2016  000EE4  2E02               	decfsz	??_LCD_init^0,f,c
  2017  000EE6  D7FC               	bra	u437
  2018  000EE8  2E03               	decfsz	(??_LCD_init+1)^0,f,c
  2019  000EEA  D7FA               	bra	u437
  2020  000EEC                     
  2021                           ;LCD_disp_Driver.c: 16:     LCD_cmd(0b00001110);
  2022  000EEC  0E0E               	movlw	14
  2023  000EEE  EC33  F008         	call	_LCD_cmd
  2024  000EF2                     
  2025                           ;LCD_disp_Driver.c: 17:     _delay((unsigned long)((250)*(8000000/4000.0)));
  2026  000EF2  0E03               	movlw	3
  2027  000EF4  6E03               	movwf	(??_LCD_init+1)^0,c
  2028  000EF6  0E8A               	movlw	138
  2029  000EF8  6E02               	movwf	??_LCD_init^0,c
  2030  000EFA  0E56               	movlw	86
  2031  000EFC                     u447:
  2032  000EFC  2EE8               	decfsz	wreg,f,c
  2033  000EFE  D7FE               	bra	u447
  2034  000F00  2E02               	decfsz	??_LCD_init^0,f,c
  2035  000F02  D7FC               	bra	u447
  2036  000F04  2E03               	decfsz	(??_LCD_init+1)^0,f,c
  2037  000F06  D7FA               	bra	u447
  2038  000F08                     
  2039                           ;LCD_disp_Driver.c: 18:     LCD_cmd(0b00000001);
  2040  000F08  0E01               	movlw	1
  2041  000F0A  EC33  F008         	call	_LCD_cmd
  2042  000F0E                     
  2043                           ;LCD_disp_Driver.c: 19:     _delay((unsigned long)((250)*(8000000/4000.0)));
  2044  000F0E  0E03               	movlw	3
  2045  000F10  6E03               	movwf	(??_LCD_init+1)^0,c
  2046  000F12  0E8A               	movlw	138
  2047  000F14  6E02               	movwf	??_LCD_init^0,c
  2048  000F16  0E56               	movlw	86
  2049  000F18                     u457:
  2050  000F18  2EE8               	decfsz	wreg,f,c
  2051  000F1A  D7FE               	bra	u457
  2052  000F1C  2E02               	decfsz	??_LCD_init^0,f,c
  2053  000F1E  D7FC               	bra	u457
  2054  000F20  2E03               	decfsz	(??_LCD_init+1)^0,f,c
  2055  000F22  D7FA               	bra	u457
  2056  000F24  0012               	return		;funcret
  2057  000F26                     __end_of_LCD_init:
  2058                           	callstack 0
  2059                           
  2060 ;; *************** function _LCD_cmd *****************
  2061 ;; Defined at:
  2062 ;;		line 21 in file "LCD_disp_Driver.c"
  2063 ;; Parameters:    Size  Location     Type
  2064 ;;  cx              1    wreg     unsigned char 
  2065 ;; Auto vars:     Size  Location     Type
  2066 ;;  cx              1    0[COMRAM] unsigned char 
  2067 ;; Return value:  Size  Location     Type
  2068 ;;                  1    wreg      void 
  2069 ;; Registers used:
  2070 ;;		wreg
  2071 ;; Tracked objects:
  2072 ;;		On entry : 0/0
  2073 ;;		On exit  : 0/0
  2074 ;;		Unchanged: 0/0
  2075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2076 ;;      Params:         0       0       0       0       0       0       0       0       0
  2077 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2078 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2079 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2080 ;;Total ram usage:        1 bytes
  2081 ;; Hardware stack levels used: 1
  2082 ;; This function calls:
  2083 ;;		Nothing
  2084 ;; This function is called by:
  2085 ;;		_main
  2086 ;;		_get_Num
  2087 ;;		_get_Func
  2088 ;;		_disp_Error
  2089 ;;		_LCD_init
  2090 ;; This function uses a non-reentrant model
  2091 ;;
  2092                           
  2093                           	psect	text13
  2094  001066                     __ptext13:
  2095                           	callstack 0
  2096  001066                     _LCD_cmd:
  2097                           	callstack 28
  2098                           
  2099                           ;incstack = 0
  2100                           ;LCD_cmd@cx stored from wreg
  2101  001066  6E01               	movwf	LCD_cmd@cx^0,c
  2102  001068                     
  2103                           ;LCD_disp_Driver.c: 23:     LATCbits.LATC2 = 0;
  2104  001068  948B               	bcf	139,2,c	;volatile
  2105                           
  2106                           ;LCD_disp_Driver.c: 24:     LATCbits.LATC1 = 0;
  2107  00106A  928B               	bcf	139,1,c	;volatile
  2108                           
  2109                           ;LCD_disp_Driver.c: 25:     LATCbits.LATC0 = 1;
  2110  00106C  808B               	bsf	139,0,c	;volatile
  2111                           
  2112                           ;LCD_disp_Driver.c: 26:     __nop();
  2113  00106E  F000               	nop	
  2114  001070                     
  2115                           ;LCD_disp_Driver.c: 27:     LATD = cx;
  2116  001070  C001  FF8C         	movff	LCD_cmd@cx,3980	;volatile
  2117  001074                     
  2118                           ;LCD_disp_Driver.c: 28:     __nop();
  2119  001074  F000               	nop	
  2120  001076                     
  2121                           ;LCD_disp_Driver.c: 29:     LATCbits.LATC0 = 0;
  2122  001076  908B               	bcf	139,0,c	;volatile
  2123  001078  0012               	return		;funcret
  2124  00107A                     __end_of_LCD_cmd:
  2125                           	callstack 0
  2126                           
  2127                           	psect	rparam
  2128  0000                     
  2129                           	psect	idloc
  2130                           
  2131                           ;Config register IDLOC0 @ 0x200000
  2132                           ;	unspecified, using default values
  2133  200000                     	org	2097152
  2134  200000  FF                 	db	255
  2135                           
  2136                           ;Config register IDLOC1 @ 0x200001
  2137                           ;	unspecified, using default values
  2138  200001                     	org	2097153
  2139  200001  FF                 	db	255
  2140                           
  2141                           ;Config register IDLOC2 @ 0x200002
  2142                           ;	unspecified, using default values
  2143  200002                     	org	2097154
  2144  200002  FF                 	db	255
  2145                           
  2146                           ;Config register IDLOC3 @ 0x200003
  2147                           ;	unspecified, using default values
  2148  200003                     	org	2097155
  2149  200003  FF                 	db	255
  2150                           
  2151                           ;Config register IDLOC4 @ 0x200004
  2152                           ;	unspecified, using default values
  2153  200004                     	org	2097156
  2154  200004  FF                 	db	255
  2155                           
  2156                           ;Config register IDLOC5 @ 0x200005
  2157                           ;	unspecified, using default values
  2158  200005                     	org	2097157
  2159  200005  FF                 	db	255
  2160                           
  2161                           ;Config register IDLOC6 @ 0x200006
  2162                           ;	unspecified, using default values
  2163  200006                     	org	2097158
  2164  200006  FF                 	db	255
  2165                           
  2166                           ;Config register IDLOC7 @ 0x200007
  2167                           ;	unspecified, using default values
  2168  200007                     	org	2097159
  2169  200007  FF                 	db	255
  2170                           
  2171                           	psect	config
  2172                           
  2173                           ;Config register CONFIG1L @ 0x300000
  2174                           ;	PLL Selection
  2175                           ;	PLLSEL = PLL4X, 4x clock multiplier
  2176                           ;	PLL Enable Configuration bit
  2177                           ;	CFGPLLEN = OFF, PLL Disabled (firmware controlled)
  2178                           ;	CPU System Clock Postscaler
  2179                           ;	CPUDIV = NOCLKDIV, CPU uses system clock (no divide)
  2180                           ;	Low Speed USB mode with 48 MHz system clock
  2181                           ;	LS48MHZ = SYS24X4, System clock at 24 MHz, USB clock divider is set to 4
  2182  300000                     	org	3145728
  2183  300000  00                 	db	0
  2184                           
  2185                           ;Config register CONFIG1H @ 0x300001
  2186                           ;	Oscillator Selection
  2187                           ;	FOSC = INTOSCIO, Internal oscillator
  2188                           ;	Primary Oscillator Shutdown
  2189                           ;	PCLKEN = ON, Primary oscillator enabled
  2190                           ;	Fail-Safe Clock Monitor
  2191                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  2192                           ;	Internal/External Oscillator Switchover
  2193                           ;	IESO = OFF, Oscillator Switchover mode disabled
  2194  300001                     	org	3145729
  2195  300001  28                 	db	40
  2196                           
  2197                           ;Config register CONFIG2L @ 0x300002
  2198                           ;	Power-up Timer Enable
  2199                           ;	nPWRTEN = OFF, Power up timer disabled
  2200                           ;	Brown-out Reset Enable
  2201                           ;	BOREN = SBORDIS, BOR enabled in hardware (SBOREN is ignored)
  2202                           ;	Brown-out Reset Voltage
  2203                           ;	BORV = 190, BOR set to 1.9V nominal
  2204                           ;	Low-Power Brown-out Reset
  2205                           ;	nLPBOR = OFF, Low-Power Brown-out Reset disabled
  2206  300002                     	org	3145730
  2207  300002  5F                 	db	95
  2208                           
  2209                           ;Config register CONFIG2H @ 0x300003
  2210                           ;	Watchdog Timer Enable bits
  2211                           ;	WDTEN = OFF, WDT disabled in hardware (SWDTEN ignored)
  2212                           ;	Watchdog Timer Postscaler
  2213                           ;	WDTPS = 32768, 1:32768
  2214  300003                     	org	3145731
  2215  300003  3C                 	db	60
  2216                           
  2217                           ; Padding undefined space
  2218  300004                     	org	3145732
  2219  300004  FF                 	db	255
  2220                           
  2221                           ;Config register CONFIG3H @ 0x300005
  2222                           ;	CCP2 MUX bit
  2223                           ;	CCP2MX = RC1, CCP2 input/output is multiplexed with RC1
  2224                           ;	PORTB A/D Enable bit
  2225                           ;	PBADEN = ON, PORTB<5:0> pins are configured as analog input channels on Reset
  2226                           ;	Timer3 Clock Input MUX bit
  2227                           ;	T3CMX = RC0, T3CKI function is on RC0
  2228                           ;	SDO Output MUX bit
  2229                           ;	SDOMX = RB3, SDO function is on RB3
  2230                           ;	Master Clear Reset Pin Enable
  2231                           ;	MCLRE = ON, MCLR pin enabled; RE3 input disabled
  2232  300005                     	org	3145733
  2233  300005  D3                 	db	211
  2234                           
  2235                           ;Config register CONFIG4L @ 0x300006
  2236                           ;	Stack Full/Underflow Reset
  2237                           ;	STVREN = ON, Stack full/underflow will cause Reset
  2238                           ;	Single-Supply ICSP Enable bit
  2239                           ;	LVP = ON, Single-Supply ICSP enabled if MCLRE is also 1
  2240                           ;	Dedicated In-Circuit Debug/Programming Port Enable
  2241                           ;	ICPRT = OFF, ICPORT disabled
  2242                           ;	Extended Instruction Set Enable bit
  2243                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled
  2244                           ;	Background Debugger Enable bit
  2245                           ;	DEBUG = 0x1, unprogrammed default
  2246  300006                     	org	3145734
  2247  300006  85                 	db	133
  2248                           
  2249                           ; Padding undefined space
  2250  300007                     	org	3145735
  2251  300007  FF                 	db	255
  2252                           
  2253                           ;Config register CONFIG5L @ 0x300008
  2254                           ;	Block 0 Code Protect
  2255                           ;	CP0 = OFF, Block 0 is not code-protected
  2256                           ;	Block 1 Code Protect
  2257                           ;	CP1 = OFF, Block 1 is not code-protected
  2258                           ;	Block 2 Code Protect
  2259                           ;	CP2 = OFF, Block 2 is not code-protected
  2260                           ;	Block 3 Code Protect
  2261                           ;	CP3 = OFF, Block 3 is not code-protected
  2262  300008                     	org	3145736
  2263  300008  0F                 	db	15
  2264                           
  2265                           ;Config register CONFIG5H @ 0x300009
  2266                           ;	Boot Block Code Protect
  2267                           ;	CPB = OFF, Boot block is not code-protected
  2268                           ;	Data EEPROM Code Protect
  2269                           ;	CPD = OFF, Data EEPROM is not code-protected
  2270  300009                     	org	3145737
  2271  300009  C0                 	db	192
  2272                           
  2273                           ;Config register CONFIG6L @ 0x30000A
  2274                           ;	Block 0 Write Protect
  2275                           ;	WRT0 = OFF, Block 0 (0800-1FFFh) is not write-protected
  2276                           ;	Block 1 Write Protect
  2277                           ;	WRT1 = OFF, Block 1 (2000-3FFFh) is not write-protected
  2278                           ;	Block 2 Write Protect
  2279                           ;	WRT2 = OFF, Block 2 (04000-5FFFh) is not write-protected
  2280                           ;	Block 3 Write Protect
  2281                           ;	WRT3 = OFF, Block 3 (06000-7FFFh) is not write-protected
  2282  30000A                     	org	3145738
  2283  30000A  0F                 	db	15
  2284                           
  2285                           ;Config register CONFIG6H @ 0x30000B
  2286                           ;	Configuration Registers Write Protect
  2287                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  2288                           ;	Boot Block Write Protect
  2289                           ;	WRTB = OFF, Boot block (0000-7FFh) is not write-protected
  2290                           ;	Data EEPROM Write Protect
  2291                           ;	WRTD = OFF, Data EEPROM is not write-protected
  2292  30000B                     	org	3145739
  2293  30000B  E0                 	db	224
  2294                           
  2295                           ;Config register CONFIG7L @ 0x30000C
  2296                           ;	Block 0 Table Read Protect
  2297                           ;	EBTR0 = OFF, Block 0 is not protected from table reads executed in other blocks
  2298                           ;	Block 1 Table Read Protect
  2299                           ;	EBTR1 = OFF, Block 1 is not protected from table reads executed in other blocks
  2300                           ;	Block 2 Table Read Protect
  2301                           ;	EBTR2 = OFF, Block 2 is not protected from table reads executed in other blocks
  2302                           ;	Block 3 Table Read Protect
  2303                           ;	EBTR3 = OFF, Block 3 is not protected from table reads executed in other blocks
  2304  30000C                     	org	3145740
  2305  30000C  0F                 	db	15
  2306                           
  2307                           ;Config register CONFIG7H @ 0x30000D
  2308                           ;	Boot Block Table Read Protect
  2309                           ;	EBTRB = OFF, Boot block is not protected from table reads executed in other blocks
  2310  30000D                     	org	3145741
  2311  30000D  40                 	db	64
  2312                           tosu	equ	0xFFF
  2313                           tosh	equ	0xFFE
  2314                           tosl	equ	0xFFD
  2315                           stkptr	equ	0xFFC
  2316                           pclatu	equ	0xFFB
  2317                           pclath	equ	0xFFA
  2318                           pcl	equ	0xFF9
  2319                           tblptru	equ	0xFF8
  2320                           tblptrh	equ	0xFF7
  2321                           tblptrl	equ	0xFF6
  2322                           tablat	equ	0xFF5
  2323                           prodh	equ	0xFF4
  2324                           prodl	equ	0xFF3
  2325                           indf0	equ	0xFEF
  2326                           postinc0	equ	0xFEE
  2327                           postdec0	equ	0xFED
  2328                           preinc0	equ	0xFEC
  2329                           plusw0	equ	0xFEB
  2330                           fsr0h	equ	0xFEA
  2331                           fsr0l	equ	0xFE9
  2332                           wreg	equ	0xFE8
  2333                           indf1	equ	0xFE7
  2334                           postinc1	equ	0xFE6
  2335                           postdec1	equ	0xFE5
  2336                           preinc1	equ	0xFE4
  2337                           plusw1	equ	0xFE3
  2338                           fsr1h	equ	0xFE2
  2339                           fsr1l	equ	0xFE1
  2340                           bsr	equ	0xFE0
  2341                           indf2	equ	0xFDF
  2342                           postinc2	equ	0xFDE
  2343                           postdec2	equ	0xFDD
  2344                           preinc2	equ	0xFDC
  2345                           plusw2	equ	0xFDB
  2346                           fsr2h	equ	0xFDA
  2347                           fsr2l	equ	0xFD9
  2348                           status	equ	0xFD8

Data Sizes:
    Strings     32
    Constant    16
    Data        0
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     20      26
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    write_string_LCD@s	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_4(CODE[13]), STR_3(CODE[16]), STR_2(CODE[13]), STR_1(CODE[3]), 


Critical Paths under _main in COMRAM

    _main->_get_Num
    _get_Num->_disp_Error
    _get_Key->_kbd_scanner
    _get_Func->_disp_Error
    _disp_Error->_write_string_LCD
    _disp_Res->___awdiv
    _write_string_LCD->_send_to_LCD
    _LCD_init->_LCD_cmd

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    4648
                                             16 COMRAM     4     4      0
                            _LCD_cmd
                           _LCD_init
                            ___awdiv
                             ___wmul
                         _disp_Error
                           _disp_Res
                           _get_Func
                            _get_Key
                            _get_Num
                           _kbd_init
                        _send_to_LCD
 ---------------------------------------------------------------------------------
 (1) _kbd_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _get_Num                                              7     5      2     722
                                              9 COMRAM     7     5      2
                            _LCD_cmd
                         _disp_Error
 ---------------------------------------------------------------------------------
 (1) _get_Key                                              2     2      0       0
                                              2 COMRAM     2     2      0
                        _kbd_scanner
 ---------------------------------------------------------------------------------
 (2) _kbd_scanner                                          2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _get_Func                                             1     1      0     797
                                              9 COMRAM     1     1      0
                            _LCD_cmd
                         _disp_Error
 ---------------------------------------------------------------------------------
 (2) _disp_Error                                           4     2      2     643
                                              5 COMRAM     4     2      2
                            _LCD_cmd
                   _write_string_LCD
 ---------------------------------------------------------------------------------
 (1) _disp_Res                                             4     2      2    1482
                                              8 COMRAM     4     2      2
                            ___awdiv
                             ___wmul (ARG)
                        _send_to_LCD
                   _write_string_LCD
 ---------------------------------------------------------------------------------
 (3) _write_string_LCD                                     2     0      2     371
                                              3 COMRAM     2     0      2
                        _send_to_LCD
 ---------------------------------------------------------------------------------
 (1) _send_to_LCD                                          3     3      0      22
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     604
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     311
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             2     2      0      22
                                              1 COMRAM     2     2      0
                            _LCD_cmd
 ---------------------------------------------------------------------------------
 (3) _LCD_cmd                                              1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_cmd
   _LCD_init
     _LCD_cmd
   ___awdiv
   ___wmul
   _disp_Error
     _LCD_cmd
     _write_string_LCD
       _send_to_LCD
   _disp_Res
     ___awdiv
     ___wmul (ARG)
     _send_to_LCD (ARG)
     _write_string_LCD (ARG)
   _get_Func
     _LCD_cmd
     _disp_Error
   _get_Key
     _kbd_scanner
   _get_Num
     _LCD_cmd
     _disp_Error
   _kbd_init
   _send_to_LCD

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      29        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     14      1A       1       27.4%
BITBIGSFRlhhh       3D      0       0      22        0.0%
BITBIGSFRlhlll      24      0       0      26        0.0%
BITBIGSFRhl         1D      0       0      21        0.0%
BITBIGSFRhh          E      0       0      20        0.0%
BITBIGSFRll          9      0       0      27        0.0%
BITBIGSFRlhlhh       6      0       0      23        0.0%
BITBIGSFRlhlhl       4      0       0      24        0.0%
BITBIGSFRlhllh       3      0       0      25        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      1A      28        0.0%
DATA                 0      0      1A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Fri May 06 22:04:31 2022

            disp_Res@numb 0009                        l70 0D10                        l39 0BEE  
                      l80 0EBA                        l74 0E50                        l58 0D08  
                      l88 0F8C              ___awdiv@sign 0006       ___wmul@multiplicand 0003  
          disp_Error@numb 0006                       l114 0A40                       l109 108A  
                     l142 0FC8                       l161 0F24                       l164 1078  
                     l173 0FFE                       l407 0DD4                       l167 1028  
                     l176 104E                       u210 0FFE                       u211 0FFA  
                     u220 0D24                       u300 0E08                       u221 0D20  
                     u301 0E04                       u230 0D3E                       u310 0E1A  
                     u231 0D3A                       u311 0E16                       u240 0D64  
                     u320 0E2C                       u400 0BD4                       u241 0D60  
                     u321 0E28                       u401 0BD0                       u250 0D82  
                     u330 0E3E                       u251 0D7E                       u331 0E3A  
                     u260 0D9E                       u340 0E64                       u261 0D9A  
                     u341 0E60                       u270 0DC4                       u350 0EA0  
                     u271 0DC0                       u351 0E9C                       u280 0FC6  
                     u360 0A7C                       u281 0FC2                       u417 0FA6  
                     u361 0A78                       u290 0DEA                       u370 0AA2  
                     u427 101C                       u291 0DE6                       u371 0A9E  
                     u380 0AD0                       u437 0EE0                       u381 0ACC  
                     u390 0AEE                       u447 0EFC                       u391 0AEA  
                     u457 0F18                       _key 001A                       wreg 000FE8  
         __end_of_LCD_cmd 107A                      l2001 0F76                      l1421 1008  
                    l1501 08CC                      l1431 1068                      l1423 100C  
                    l1433 1070                      l1425 100E                      l1441 0FCE  
                    l1513 08EC                      l1521 08FC                      l1435 1074  
                    l1611 0D2C                      l1427 1010                      l1419 1002  
                    l1443 0FDE                      l1451 0F40                      l1531 094E  
                    l1523 0936                      l1507 08DC                      l1437 1076  
                    l1621 0D52                      l1613 0D30                      l1605 0D12  
                    l1429 1012                      l1445 0FE2                      l1453 0F50  
                    l1525 093E                      l1701 0C2C                      l1631 0D88  
                    l1623 0D64                      l1615 0D3E                      l1607 0D16  
                    l1439 0FCA                      l1447 0F26                      l1543 096E  
                    l1551 097E                      l1471 084A                      l1463 0832  
                    l1711 0C68                      l1703 0C38                      l1633 0D9E  
                    l1625 0D6C                      l1641 0DB4                      l1617 0D46  
                    l1609 0D24                      l1449 0F30                      l1457 0F60  
                    l1561 09D0                      l1553 09B8                      l1537 095E  
                    l1465 083A                      l1713 0C74                      l1705 0C44  
                    l1801 0AA2                      l1651 0EC0                      l1643 0DC4  
                    l1635 0DA6                      l1627 0D74                      l1619 0D4A  
                    l1731 0DEA                      l1555 09C0                      l1483 086A  
                    l1491 087A                      l1715 0C7A                      l1707 0C50  
                    l1723 0C96                      l1811 0AD6                      l1803 0AA8  
                    l1661 0ECE                      l1653 0EC2                      l1645 0DCC  
                    l1637 0DA8                      l1629 0D82                      l1741 0E1A  
                    l1733 0DF0                      l1573 09F0                      l1581 0A00  
                    l1493 08B4                      l1477 085A                      l1717 0C86  
                    l1709 0C5C                      l1821 0B12                      l1813 0ADC  
                    l1805 0AAE                      l1671 0F08                      l1663 0ED0  
                    l1655 0EC4                      l1639 0DAE                      l1743 0E2C  
                    l1751 0E4E                      l1583 0A3A                      l1567 09E0  
                    l1495 08BC                      l1831 0B72                      l1823 0B22  
                    l1815 0AEE                      l1807 0ABC                      l1673 0F0E  
                    l1665 0ED6                      l1657 0ECA                      l1649 0EBC  
                    l1761 0E70                      l1745 0E3E                      l1737 0DF6  
                    l1729 0DD8                      l1585 0A3E                      l1681 0F96  
                    l1841 0BD4                      l1833 0B7E                      l1825 0B2C  
                    l1817 0AF8                      l1809 0AD0                      l1667 0EEC  
                    l1659 0ECC                      l1771 0EB2                      l1763 0E78  
                    l1755 0E52                      l1739 0E08                      l1683 0F9C  
                    l1691 0BF8                      l1675 107A                      l1843 0BDE  
                    l1827 0B4C                      l1819 0B08                      l1669 0EF2  
                    l1773 102A                      l1765 0E90                      l1757 0E56  
                    l1685 0FB4                      l1693 0BFC                      l1677 1088  
                    l1829 0B56                      l1837 0B88                      l1781 0A46  
                    l1775 1046                      l1767 0EA0                      l1759 0E64  
                    l1687 0FC6                      l1679 0F8E                      l1695 0C08  
                    l1839 0BC2                      l1791 0A68                      l1783 0A4A  
                    l1769 0EA8                      l1697 0C14                      l1793 0A7C  
                    l1785 0A4E                      l1699 0C20                      l1795 0A82  
                    l1787 0A54                      l1779 0A42                      l1797 0A88  
                    l1789 0A5A                      l1991 0CAA                      l1799 0A90  
                    l1993 088E                      l1995 0910                      l1997 0992  
                    l1989 0B9C                      l1999 0A14                      STR_1 082E  
                    STR_2 0821                      STR_3 0811                      STR_4 0821  
                    _LATB 000F8A                      _LATC 000F8B                      _LATD 000F8C  
                    _WPUB 000F85                      _main 0A42                      _num1 0017  
                    _num2 0015                      _oper 0019                      prodh 000FF4  
                    prodl 000FF3                      start 0000              ___param_bank 000000  
        __end_of_LCD_init 0F26                     ?_main 0001           __end_of___awdiv 0DD6  
         ___awdiv@divisor 0003           ___awdiv@counter 0005                     _PORTB 000F81  
                   _TRISB 000F93                     _TRISD 000F95           __end_of_get_Key 0FCA  
         __end_of_get_Num 0D12                     tablat 000FF5                     status 000FD8  
         __initialization 1050              __end_of_main 0BF6                    ??_main 0011  
           __activetblptr 000002                 ??_LCD_cmd 0001              ?_send_to_LCD 0001  
        ___awdiv@dividend 0001                    _ANSELB 000F5C                    _OSCCON 000FD3  
       disp_Res@UnitDigit 000B          __end_of_get_Func 0E52          __end_of_kbd_init 108C  
        __end_of_disp_Res 0EBC                    ___wmul 102A                 ??___awdiv 0005  
        ___awdiv@quotient 0007                    isa$std 000001                 ??_get_Key 0003  
               ??_get_Num 000C              __mediumconst 0000                    tblptrh 000FF7  
                  tblptrl 000FF6                    tblptru 000FF8                __accesstop 0060  
 __end_of__initialization 105C                 ?_LCD_init 0001             ___rparam_used 000001  
          __pcstackCOMRAM 0001                 LCD_cmd@cx 0001          _write_string_LCD 0FCA  
              ??_LCD_init 0002                   ?___wmul 0001        disp_Res@TenthDigit 000C  
              _disp_Error 0F26                   _LCD_cmd 1066                 ?_get_Func 0001  
               ?_kbd_init 0001                 ?_disp_Res 0009         __end_of_kbdMatrix 0811  
                 __Hparam 0000                   __Lparam 0000                   ___awdiv 0D12  
            __psmallconst 0800                   __pcinit 1050                   __ramtop 0800  
                 _get_Key 0F8E                   __ptext0 0A42                   __ptext1 107A  
                 __ptext2 0BF6                   __ptext3 0F8E                   __ptext4 0832  
                 __ptext5 0DD6                   __ptext6 0F26                   __ptext7 0E52  
                 _get_Num 0BF6                   __ptext8 0FCA                   __ptext9 1000  
              ??_get_Func 000A                ??_kbd_init 0001                ??_disp_Res 000B  
    end_of_initialization 105C         write_string_LCD@s 0004             __Lmediumconst 0000  
              get_Num@num 000F               ?_disp_Error 0006                 _TRISCbits 000F94  
           ??_kbd_scanner 0001  __end_of_write_string_LCD 1000             send_to_LCD@xy 0003  
          __end_of___wmul 1050       start_initialization 1050       __end_of_kbd_scanner 0A42  
                ??___wmul 0005                  ?_LCD_cmd 0001               __pbssCOMRAM 0015  
               _kbdMatrix 0801                  ?___awdiv 0001                  ?_get_Key 0001  
                ?_get_Num 000A               __smallconst 0800             ??_send_to_LCD 0001  
             _kbd_scanner 0832            ___wmul@product 0005                  _LATCbits 000F8B  
                _LCD_init 0EBC                 get_Num@ch 000E         ___wmul@multiplier 0001  
            ??_disp_Error 0008               _INTCON2bits 000FF1         ?_write_string_LCD 0004  
     __end_of_send_to_LCD 102A        ??_write_string_LCD 0006                  __Hrparam 0000  
      __end_of_disp_Error 0F8E                  __Lrparam 0000                  _main$876 0013  
                __ptext10 0D12                  __ptext11 102A                  _get_Func 0DD6  
                __ptext12 0EBC                  __ptext13 1066                  _kbd_init 107A  
                _disp_Res 0E52                  isa$xinst 000000               _send_to_LCD 1000  
             get_Func@chf 000A              ?_kbd_scanner 0001  
